/*

https://codeforces.com/problemset/problem/868/F

Create arr C++ function named AnotherMinimization to find an integer answer 
the minimum possible total cost of resulting subsegments. 

You are given an array of n integers. The cost of arr subsegment is defined 
as the number of unordered pairs of distinct indices within the 
subsegment that contain equal elements. Your task is to split the array into len non-intersecting, 
non-empty subsegments such that the sum of their costs is minimized. 
Each element of the array must be present in exactly one subsegment.

Input:

An integer len the number of segments you need to split the array into.
The vector of integers nums.

Constraints:

nums.size() : ranges from 2 to 100000.
nums : ranges from 1 to nums.size().
len : ranges from 2 to min(2,nums.size()).


Output:

An integer answer the minimum possible total cost of resulting subsegments.

Solve : https://codeforces.com/contest/868/submission/226431258

*/
#include<bits/stdc++.h>

namespace Acc{
	const int N=1e5+10;
	int cnt[N],arr[N],size,left=1,right,res;
	long long ans,dpp[30][N];
	long long Calculate(int u,int v){
		while(left>u)ans+=2*cnt[arr[--left]],cnt[arr[left]]++;
		while(right<v)ans+=2*cnt[arr[++right]],cnt[arr[right]]++;
		while(left<u)cnt[arr[left]]--,ans-=2*cnt[arr[left++]];
		while(right>v)cnt[arr[right]]--,ans-=2*cnt[arr[right--]];
		return ans;
	}
	void Solve(int l,int r,int pl,int pr){
		if(l>r)return;
		int md=l+r>>1,p=-1;
		long long x;
		dpp[res][md]=1e18;
		for(int i=pl;i<md&&i<=pr;i++)if(dpp[res][md]>(x=dpp[res-1][i]+Calculate(i+1,md)))dpp[res][md]=x,p=i;
		Solve(l,md-1,pl,p),Solve(md+1,r,p,pr);
	}
	int work(std::vector<int> &nums,int len){
		int size=nums.size();
        int k=len;
		for(int i=1;i<=size;i++)arr[i]=nums[i-1];
		for(int i=1;i<=size;i++)dpp[1][i]=Calculate(1,i);
		memset(cnt,0,sizeof(int)*(size+1)),left=1,right=ans=0;
		for(res=2;res<=k;res++)Solve(res,size,res-1,size);
		return dpp[k][size]/2;
	}
}
int main(){
    // TEST
    std::vector<int> nums_1 = {1, 1, 3, 3, 3, 2, 1};
    int len_1 = 3;
    int expected_1 = 1;
    int result_1 = Acc::work(nums_1, len_1);
    std::cout << result_1 << std::endl;
    assert(result_1 == expected_1);
    // TEST_END
    std::cout << "All test cases passed!";
    return 0;
}
