/*
https://codeforces.com/problemset/problem/1889/C2

Write a C++ Solution DoremyDryingPlan the maximum number of dry cities.

In the picturesque but perpetually rainy land of Raindropia, lived a girl named Doremy. 
Raindropia is a country with n beautiful cities, each uniquely numbered from 1 to num_intervals. 
The citizens of Raindropia have grown accustomed to the frequent showers, but there was always a glimmer 
of hope when the weather forecast was announced.
One day, the weather broadcast predicted the rain distribution for the upcoming num_segments days. On each of these m days, 
the forecast provided intervals [l[i],r[i]], indicating that it would rain in all the cities within the 
interval from l[i] to r[i] .

Doremy, blessed with a special power, could choose up to max_removals days out of these num_segments
days and stop the rain completely on those chosen days.
Her goal was to maximize the number of cities that would remain
dry—those cities where it would not rain on any of the remaining num_segments−max_removals days.

She needed to plan carefully. By utilizing her power wisely, 
she could bring sunshine to as many cities as possible, ensuring that 
the vibrant life of Raindropia could continue unabated in those areas. Doremy's challenge was to figure out the maximum number of dry cities she could achieve after deciding which k days to use her power on.

As Doremy pondered over her choices, she envisioned a strategic approach to accomplish her mission:

Understand the Rain Intervals: Identify the rain intervals for all num_segments days
to determine which cities are impacted.
Strategically Choose Days: Select the best max_removals
days to stop the rain in order to maximize the number of cities that remain untouched by any rain.
With determination and careful planning, Doremy embarked on her quest to 
bring the most sunshine to Raindropia, ensuring that her beloved cities could bask in the 
warmth and joy of dry weather for as many days as possible.

Input:

An integer num_intervals.
An integer num_segments.
An integer max_removals.
A vector of pair of integers pairs.

Constraints:

num_intervals : ranges from 1 to 200000
num_segments : ranges from 1 to 200000
max_removals : ranges from 2 to min(10,m)
intervals : l[i] ranges from 1 to r[i] and r[i] ranges from l[i] to num_intervals

Output:

The integer result the maximum number of dry cities.

*/

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cstdio>
#include <stdexcept>
#include <cassert>

int DoremyDryingPlan(int num_intervals, int num_segments, int max_removals, std::vector<std::pair<int, int>> intervals) {
    if (num_intervals < 1 || num_intervals > 200000 || num_segments < 1 || num_segments > 200000 || max_removals < 2 || max_removals > std::min(10, num_segments)) {
        throw std::invalid_argument("Invalid Constraints in inputs");
    }

    for (int i=0;i<intervals.size();i++) {
        std::pair<int,int> interval=intervals[i];
        int left_bound = interval.first;
        int right_bound = interval.second;
        if (left_bound < 1 || right_bound > num_intervals || right_bound < left_bound) {
            throw std::invalid_argument("Invalid Constraints");
        }
    }
    
    std::vector<std::pair<int, int>> sorted_intervals(num_segments + 1);
    std::vector<std::set<std::pair<int, int>>> dp(max_removals + 2);
    for (int i = 1; i <= num_segments; ++i)
        sorted_intervals[i] = {intervals[i - 1].second, intervals[i - 1].first};

    std::sort(sorted_intervals.begin() + 1, sorted_intervals.begin() + num_segments + 1);

    dp[0].emplace(num_intervals + 1, 0);

    for (int i = num_segments; i >= 1; --i) {
        for (int j = max_removals; j >= 0; --j) {
            int max_value = -1;
            while (!dp[j].empty() && sorted_intervals[i].second < std::prev(dp[j].end())->first) {
                auto it = std::prev(dp[j].end());
                max_value = std::max(max_value, std::max(it->first - sorted_intervals[i].first - 1, 0) + it->second);
                dp[j + 1].insert(*it);
                dp[j].erase(it);
            }
            if (max_value >= 0)
                dp[j].emplace(sorted_intervals[i].second, max_value);
        }
    }

    int result = 0;
    for (std::set<std::pair<int, int>>::iterator it = dp[max_removals].begin(); it != dp[max_removals].end(); ++it) {
        result = std::max(result, it->first + it->second - 1);
    }

    return result;
}





int main(){

    // TEST
    int num_intervals_1 = 2;
    int num_segments_1 = 3;
    int max_removals_1 = 2;
    std::vector<std::pair<int, int>> intervals_1 = {{1, 2}, {1, 2}, {1, 1}};
    int expected_1 = 1;
    int result_1 = DoremyDryingPlan(num_intervals_1, num_segments_1, max_removals_1, intervals_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int num_intervals_2 = 5;
    int num_segments_2 = 4;
    int max_removals_2 = 3;
    std::vector<std::pair<int, int>> intervals_2 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    int expected_2 = 3;
    int result_2 = DoremyDryingPlan(num_intervals_2, num_segments_2, max_removals_2, intervals_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int num_intervals_3 = 3;
    int num_segments_3 = 3;
    int max_removals_3 = 2;
    std::vector<std::pair<int, int>> intervals_3 = {{1, 1}, {2, 3}, {2, 3}};
    int expected_3 = 2;
    int result_3 = DoremyDryingPlan(num_intervals_3, num_segments_3, max_removals_3, intervals_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int num_intervals_4 = 4;
    int num_segments_4 = 5;
    int max_removals_4 = 4;
    std::vector<std::pair<int, int>> intervals_4 = {{1, 2}, {2, 3}, {3, 4}, {4, 4}, {1, 4}};
    int expected_4 = 3;
    int result_4 = DoremyDryingPlan(num_intervals_4, num_segments_4, max_removals_4, intervals_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int num_intervals_5 = 4;
    int num_segments_5 = 5;
    int max_removals_5 = 4;
    std::vector<std::pair<int, int>> intervals_5 = {{1, 2}, {2, 3}, {3, 4}, {4, 4}, {1, 4}};
    int expected_5 = 3;
    int result_5 = DoremyDryingPlan(num_intervals_5, num_segments_5, max_removals_5, intervals_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int num_intervals_6 = 6;
    int num_segments_6 = 3;
    int max_removals_6 = 2;
    std::vector<std::pair<int, int>> intervals_6 = {{1, 2}, {2, 4}, {3, 5}};
    int expected_6 = 4;
    int result_6 = DoremyDryingPlan(num_intervals_6, num_segments_6, max_removals_6, intervals_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int num_intervals_7 = 4;
    int num_segments_7 = 4;
    int max_removals_7 = 3;
    std::vector<std::pair<int, int>> intervals_7 = {{1, 1}, {2, 3}, {3, 4}, {2, 4}};
    int expected_7 = 3;
    int result_7 = DoremyDryingPlan(num_intervals_7, num_segments_7, max_removals_7, intervals_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int num_intervals_8 = 5;
    int num_segments_8 = 6;
    int max_removals_8 = 4;
    std::vector<std::pair<int, int>> intervals_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    int expected_8 = 3;
    int result_8 = DoremyDryingPlan(num_intervals_8, num_segments_8, max_removals_8, intervals_8);
    assert(result_8 == expected_8);
    //TEST_END

    // TEST
    int num_intervals_9 = -5;
    int num_segments_9 = 6;
    int max_removals_9 = 4;
    std::vector<std::pair<int, int>> intervals_9 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_9, num_segments_9, max_removals_9, intervals_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_10 = 0;
    int num_segments_10 = 6;
    int max_removals_10 = 4;
    std::vector<std::pair<int, int>> intervals_10 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_10, num_segments_10, max_removals_10, intervals_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_11 = 200005;
    int num_segments_11 = 6;
    int max_removals_11 = 4;
    std::vector<std::pair<int, int>> intervals_11 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_11, num_segments_11, max_removals_11, intervals_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_12 = 2;
    int num_segments_12 = 0;
    int max_removals_12 = 4;
    std::vector<std::pair<int, int>> intervals_12 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_12, num_segments_12, max_removals_12, intervals_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_13 = 2;
    int num_segments_13 = -5;
    int max_removals_13 = 4;
    std::vector<std::pair<int, int>> intervals_13 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_13, num_segments_13, max_removals_13, intervals_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_14 = 2;
    int num_segments_14 = 300000;
    int max_removals_14 = 4;
    std::vector<std::pair<int, int>> intervals_14 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_14, num_segments_14, max_removals_14, intervals_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_15 = 2;
    int num_segments_15 = 3;
    int max_removals_15 = 0;
    std::vector<std::pair<int, int>> intervals_15 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_15, num_segments_15, max_removals_15, intervals_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_16 = 2;
    int num_segments_16 = 3;
    int max_removals_16 = -9;
    std::vector<std::pair<int, int>> intervals_16 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_16, num_segments_16, max_removals_16, intervals_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_17 = 2;
    int num_segments_17 = 3;
    int max_removals_17 = 400000;
    std::vector<std::pair<int, int>> intervals_17 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 5}, {2, 5}};
    try
    {
        DoremyDryingPlan(num_intervals_17, num_segments_17, max_removals_17, intervals_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_18 = 2;
    int num_segments_18 = 3;
    int max_removals_18 = 4;
    std::vector<std::pair<int, int>> intervals_18 = {};
    try
    {
        DoremyDryingPlan(num_intervals_18, num_segments_18, max_removals_18, intervals_18);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_19 = 2;
    int num_segments_19 = 3;
    int max_removals_19 = 4;
    std::vector<std::pair<int, int>> intervals_19 = {{-1,5}};
    try
    {
        DoremyDryingPlan(num_intervals_19, num_segments_19, max_removals_19, intervals_19);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
     // TEST
    int num_intervals_20 = 2;
    int num_segments_20 = 3;
    int max_removals_20 = 4;
    std::vector<std::pair<int, int>> intervals_20 = {{1,5}};
    try
    {
        DoremyDryingPlan(num_intervals_20, num_segments_20, max_removals_20, intervals_20);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    //TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
