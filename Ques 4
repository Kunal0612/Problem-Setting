// https://leetcode.com/problems/find-subarray-with-bitwise-and-closest-to-k/description/
// Create a C++ function MinimumDifference which helps to find out the minimum 
// abs(and_value-and[subarray[l,r]]).


// In the land of Bitonia, there exists a powerful artifact known as the "AND Amulet". 
// This magical amulet can calculate the bitwise AND of any sequence of numbers, and its 
// power is said to be unmatched. The wise and benevolent King Bitticus, ruler of Bitonia, 
// has decided to use the power of the AND Amulet to solve a perplexing problem that has baffled 
// the citizens for ages.

// The kingdom's scholars have discovered that certain subarrays of magical numbers have unique 
// properties. Specifically, they are interested in finding subarrays of these numbers where the
// bitwise AND of all the elements is as close as possible to a given mystical number, denoted as k. The closer the AND result is to k, the greater the magical harmony achieved.

// You, as the chief programmer of the realm, have been tasked with a critical mission: to write a
// program that will aid the scholars in their quest. Given an array of magical numbers and the
// mystical number k, you must find a subarray such that the absolute difference between k and the
// bitwise AND of the subarray elements is as small as possible. The subarray must be a contiguous
// non-empty sequence within the array.

// Input:

// A vector of integers nums containing the elements of the vector.
// An integer and_value representing the subarray and value to be close with.


// Output :

// An integer minimum_difference the minimum possible value of the absolute difference.


// Constraints:

// num_length: Should be at least 1 and at most 100,000.
// nums: Each element should be between 1 and 1,000,000,000 (10^9) inclusive.
// and_value: Should be at least 1 and 1,000,000,000 (10^9) inclusive.



#include <iostream>
#include <vector>
#include <climits>
#include <cassert>

class SegmentTree {
public:
    std::vector<int> tree;
    int size;

    SegmentTree(std::vector<int>& array) {
        size = array.size();
        tree.resize(4 * size);
        Build(array, 0, 0, size - 1);
    }

    void Build(std::vector<int>& array, int node, int start, int end) {
        if (start == end) {
            tree[node] = array[start];
        } else {
            int mid = (start + end) / 2;
            Build(array, 2 * node + 1, start, mid);
            Build(array, 2 * node + 2, mid + 1, end);
            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];
        }
    }

    int Query(int left, int right) {
        return Query(0, 0, size - 1, left, right);
    }

    int Query(int node, int start, int end, int left, int right) {
        if (right < start || end < left) {
            return INT_MAX;
        }
        if (left <= start && end <= right) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int query_left = Query(2 * node + 1, start, mid, left, right);
        int query_right = Query(2 * node + 2, mid + 1, end, left, right);
        return query_left & query_right;
    }
};

int SegmentTreeQuery(SegmentTree &segment_tree, int start, int end)
{
    return segment_tree.Query(start, end);
}
int MinimumDifference(std::vector<int> &nums, int and_value)
{
    int num_length=nums.size();
    if (num_length < 1 || num_length > 200000 || nums.size() != num_length || and_value < 1 || and_value > 1000000000)
    {
        throw std::invalid_argument("Invalid input parameters");
    }
    for (int num : nums)
    {
        if (num < 1 || num > 1000000000)
        {
            throw std::invalid_argument("Invalid element in the array");
        }
    }

    SegmentTree segment_tree(nums);
    int minimum_difference = INT_MAX;

    for (int start = 0; start < num_length; ++start)
    {
        int left = start - 1, right = num_length - 1, mid;
        while (left <= right)
        {
            mid = (left + right) / 2;
            if (SegmentTreeQuery(segment_tree, start, mid) >= and_value)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }
        if (left != start - 1)
        {
            minimum_difference = std::min(minimum_difference, std::abs(SegmentTreeQuery(segment_tree, start, left) - and_value));
        }
        minimum_difference = std::min(minimum_difference, std::abs(and_value - SegmentTreeQuery(segment_tree, start, right)));
    }
    return minimum_difference;
}

int main() {
    // TEST
    std::vector<int> nums_1 = {1, 2, 4, 5};
    int and_value_1 = 3;
    int expected_1 = 1;
    int result_1 = MinimumDifference(nums_1, and_value_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {8, 1, 6, 7, 9};
    int and_value_2 = 2;
    int expected_2 = 1;
    int result_2 = MinimumDifference(nums_2, and_value_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {5, 8, 12};
    int and_value_3 = 10;
    int expected_3 = 2;
    int result_3 = MinimumDifference(nums_3, and_value_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {3, 7};
    int and_value_4 = 6;
    int expected_4 = 1;
    int result_4 =MinimumDifference(nums_4, and_value_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {4};
    int and_value_5 = 3;
    int expected_5 = 1;
    int result_5 = MinimumDifference(nums_5, and_value_5);
    assert(result_5 == expected_5);
    // TEST_END
    

    // TEST 6
    std::vector<int> nums_6 = {2, 4, 6, 8, 10, 12};
    int and_value_6 = 7;
    int expected_6 = 1;
    int result_6 = MinimumDifference(nums_6, and_value_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {15, 30, 45, 60, 75, 90, 105};
    int and_value_7 = 50;
    int expected_7 = 5;
    int result_7 = MinimumDifference(nums_7, and_value_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST 8
    std::vector<int> nums_8 = {1000000000, 999999999, 999999998};
    int and_value_8 = 500000000;
    int expected_8 = 499999488;
    int result_8 = MinimumDifference(nums_8, and_value_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {100, 200, 300, 400, 500};
    int and_value_9 = 250;
    int expected_9 = 6;
    int result_9 =MinimumDifference(nums_9, and_value_9);
    assert(result_9 == expected_9);
    // TEST_END
    // TEST
    std::vector<int> nums_10 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int and_value_10 = 0;
    try {
        MinimumDifference( nums_10, and_value_10);
        assert(false);
    } catch (const std::invalid_argument &e) {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {1, 2, -3, -4, 5, 6, -7, 8, 9, 10};
    int and_value_11 = -5;
    try {
        MinimumDifference(nums_11, and_value_11);
        assert(false);
    } catch (const std::invalid_argument &e) {
        assert(true);
    }
    // TEST_END

     // TEST 
    std::vector<int> nums_12 = {1, 1, 1};
    int and_value_12 = 2;
    int expected_12 = 1;
    int result_12 = MinimumDifference(nums_12, and_value_12);
    assert(result_12 == expected_12);
    // TEST_END

    std::cout << "All test cases passed!\n";
    return 0;
}
