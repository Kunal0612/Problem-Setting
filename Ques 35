/*
https://leetcode.com/problems/maximum-number-of-points-from-grid-queries/

Write a function MaxPoints that find the vector answer of size k such that answer[i] is the maximum number of points you can achieve starting from the top-left cell for each queries[i].

In a mystical realm, you are given an m x n integer matrix called grid and an array queries of size k. Your task is to determine how many points you can score by navigating the grid based on the given queries.

Each query in queries represents a challenge where you start from the top-left cell of the matrix and can move to adjacent cells (up, down, left, right) under certain conditions. For each integer queries[i], you will follow these steps:

Begin at the top-left cell (0, 0) of the matrix.
If queries[i] is strictly greater than the value of the current cell you are in, you earn one point if it is your first time visiting this cell. You can then move to any of the adjacent cells in all 4 directions (up, down, left, right).
If queries[i] is not strictly greater than the value of the current cell, you do not earn any points, and the process for this query ends.
The goal is to determine the maximum number of points you can accumulate for each query.

Task:

Determine and return an vector answer of size k such that answer[i] is the maximum number of points you can achieve starting from the top-left cell for each queries[i].

Input:

An vector of vector of integer grid.
An integer vector queries of size k.

Output:

An integer array answer of size k, where answer[i] represents the maximum points for queries[i].

Constraints:

The number of rows m in the matrix is at least 2 and at most 1,000.
The number of columns n in the matrix is at least 2 and at most 1,000.
The total number of elements m√ón in the matrix is at least 4 and at most 100,000.
The length k of the queries array is between 1 and 10,000, inclusive.
Each element in the matrix grid[i][j] and each query queries[i] is between 1 and 1,000,000, inclusive.

*/

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <stdexcept>
#include <climits>
#include <cassert>

struct Edge
{
    int start;
    int end;
    int max_value;
    Edge(int node_a, int node_b, int maxi) : start(node_a), end(node_b), max_value(maxi) {}
};

class DSU
{
private:
    std::vector<int> parent;
    std::vector<int> size;

public:
    DSU(int num_nodes)
    {
        parent.resize(num_nodes);
        size.resize(num_nodes, 1);
        for (int index = 0; index < num_nodes; index++)
        {
            parent[index] = index;
        }
    }
    int Find(int node)
    {
        if (parent[node] == node){
            return node;
        }
        parent[node] = Find(parent[node]);
        return parent[node];
    }
    void Union(int node_x, int node_y)
    {
        int root_x = Find(node_x);
        int root_y = Find(node_y);
        if (root_x == root_y){
            return;
        }
        parent[root_y] = root_x;
        size[root_x] += size[root_y];
    }
    int GetSize(int node)
    {
        return size[Find(node)];
    }
};

bool IsWithinGrid(int node_x, int node_y, int &row, int &col)
{
    if (node_x < 0 || node_y < 0 || node_x >= row || node_y >= col){
        return false;
    }
    return true;
}

void ProcessEdges(std::vector<std::vector<int>> &grid, std::vector<Edge> &all_edges)
{
    int num_rows = grid.size();
    int num_cols = grid[0].size();
    int start, end;
    for (int i = 0; i < num_rows; ++i)
    {
        for (int j = 0; j < num_cols; ++j)
        {
            start = i * num_cols + j;
            if (IsWithinGrid(i, j + 1, num_rows, num_cols))
            {
                end = i * num_cols + j + 1;
                Edge temp_edge(start, end, std::max(grid[i][j], grid[i][j + 1]));
                all_edges.push_back(temp_edge);
            }
            if (IsWithinGrid(i + 1, j, num_rows, num_cols))
            {
                end = (i + 1) * num_cols + j;
                Edge temp_edge(start, end, std::max(grid[i][j], grid[i + 1][j]));
                all_edges.push_back(temp_edge);
            }
        }
    }
}

std::vector<int> maxPoints(std::vector<std::vector<int>> &grid, std::vector<int> &queries)
{
    int num_rows = grid.size();
    int num_cols = grid[0].size();
    int total_cells = num_rows * num_cols;

    if (num_rows < 2 || num_rows > 1000 || num_cols < 2 || num_cols > 1000 || total_cells < 4 || total_cells > 100000)
    {
        throw std::invalid_argument("Invalid grid dimensions. Constraints: 2 <= m, n <= 1000 and 4 <= m * n <= 105.");
    }

    for (int i = 0; i < num_rows; ++i)
    {
        for (int j = 0; j < num_cols; ++j)
        {
            if (grid[i][j] < 1 || grid[i][j] > 1000000)
            {
                throw std::invalid_argument("Invalid grid value. Each value must be between 1 and 10^6.");
            }
        }
    }

    if (queries.size() < 1 || queries.size() > 10000)
    {
        throw std::invalid_argument("Invalid number of queries. Must be between 1 and 104.");
    }

    for (int i = 0; i < queries.size(); ++i)
    {
        if (queries[i] < 1 || queries[i] > 1000000)
        {
            throw std::invalid_argument("Invalid query value. Each value must be between 1 and 106.");
        }
    }

    std::vector<Edge> all_edges;
    ProcessEdges(grid, all_edges);
    std::sort(all_edges.begin(), all_edges.end(),
              [](Edge edge_a, Edge edge_b)
              {
                  return edge_a.max_value < edge_b.max_value;
              });

    DSU dsu_object(num_cols * num_rows);

    std::vector<std::pair<int, int>> query_pairs;
    for (int i = 0; i < queries.size(); ++i)
    {
        query_pairs.push_back({queries[i], i});
    }

    std::sort(query_pairs.begin(), query_pairs.end());

    std::vector<int> results(queries.size(), 0);
    int edge_pointer = 0;

    for (int i = 0; i < query_pairs.size(); ++i)
    {
        while (edge_pointer < all_edges.size() && all_edges[edge_pointer].max_value < query_pairs[i].first)
        {
            dsu_object.Union(all_edges[edge_pointer].start, all_edges[edge_pointer].end);
            edge_pointer++;
        }
        if (grid[0][0] < query_pairs[i].first)
        {
            results[query_pairs[i].second] = dsu_object.GetSize(0);
        }
    }
    return results;
}

int main(){

    // TEST
    std::vector<std::vector<int>> grid_1 = {{1, 2, 3}, {2, 5, 7}, {3, 5, 1}};
    std::vector<int> queries_1 = {5, 6, 2};
    std::vector<int> expected_1 = {5, 8, 1};
    std::vector<int> result_1 = maxPoints(grid_1, queries_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_2 = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
    std::vector<int> queries_2 = {1, 2};
    std::vector<int> expected_2 = {0,9};
    std::vector<int> result_2 = maxPoints(grid_2, queries_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_3 = {{3, 3, 3}, {3, 3, 3}, {3, 3, 3}};
    std::vector<int> queries_3 = {3, 4};
    std::vector<int> expected_3 = {0,9};
    std::vector<int> result_3 = maxPoints(grid_3, queries_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_4 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<int> queries_4 = {7, 8, 1};
    std::vector<int> expected_4 = {6,7,0};
    std::vector<int> result_4 = maxPoints(grid_4, queries_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_5 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<int> queries_5 = {10, 1};
    std::vector<int> expected_5 = {9, 0};
    std::vector<int> result_5 = maxPoints(grid_5, queries_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_6 = {{10, 10, 10}, {10, 10, 10}, {10, 10, 10}};
    std::vector<int> queries_6 = {10, 20};
    std::vector<int> expected_6 = {0,9};
    std::vector<int> result_6 = maxPoints(grid_6, queries_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_7 = {{5, 4, 3}, {2, 7, 8}, {6, 5, 9}};
    std::vector<int> queries_7 = {6, 5, 4};
    std::vector<int> expected_7 = {4,0,0};
    std::vector<int> result_7 = maxPoints(grid_7, queries_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_8 = {{1, 3, 5}, {7, 9, 11}, {13, 15, 17}};
    std::vector<int> queries_8 = {12, 10, 14};
    std::vector<int> expected_8 = {6,5,7};
    std::vector<int> result_8 = maxPoints(grid_8, queries_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::vector<std::vector<int>> grid_9 = {{1, 2, 3}, {2, 5, 7}}; 
    std::vector<int> queries_9 = {};                               
    try
    {
        maxPoints(grid_9, queries_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_10 = {{1, 2, 3}, {2, 5, 7}}; 
    std::vector<int> queries_10 = {0};                              
    try
    {
        maxPoints(grid_10, queries_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_11 = {{1, 2, 3}, {2, 5, 7}};
    std::vector<int> queries_11 = {1000001};                        
    try
    {
        maxPoints(grid_11, queries_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_12 = {{1, 2, 3}, {2, 5, 7}}; 
    std::vector<int> queries_12(10001, 5);                         
    try
    {
        maxPoints(grid_12, queries_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END


    // TEST
    std::vector<std::vector<int>> grid_13 = {{1, 2, 3}, {2, 5, 7}, {3, 5, 1}, {4, 5, 6}, {5, 6, 7}}; 
    std::vector<int> queries_13 = {-10};                                                             
    try
    {
        maxPoints(grid_13, queries_13);
        assert(false); 
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_14 = {{1, 2, 3, -4}, {5, 6, 7, -8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; // valid grid
    std::vector<int> queries_14 = {1};                                                                       // valid query
    try
    {
        maxPoints(grid_14, queries_14);
        assert(false); 
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_15 = {{1, 2, 3}, {2, 5, 7}, {3, 5, 1}}; 
    std::vector<int> queries_15 = {1000001};                                   
    try
    {
        maxPoints(grid_15, queries_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<std::vector<int>> grid_16 = {{1, 2, 1000002}, {2, 5, 7}, {3, 5, 1}}; 
    std::vector<int> queries_16 = {1};                                   
    try
    {
        maxPoints(grid_16, queries_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<std::vector<int>> grid_17(1002,std::vector<int> (1002,1));
    std::vector<int> queries_17 = {1};                                   
    try
    {
        maxPoints(grid_17, queries_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
