/*

https://codeforces.com/problemset/problem/1481/E

Create a C++ function named SortingBooks to find an integer answer minimum number of operations to make the shelf beautiful.

One day you wanted to read something, so you went to your bookshelf to grab some book. But when you saw how messy the bookshelf was you decided to clean it up first.

There are n books standing in a row on the shelf, the i-th book has color nums[i].

You'd like to rearrange the books to make the shelf look beautiful. The shelf is considered beautiful if all books of the same color are next to each other.

In one operation you can take one book from any position on the shelf and move it to the right end of the shelf.

What is the minimum number of operations you need to make the shelf beautiful?

Input:

The vector of integers nums.

Constraints:

nums.size() : ranges from 1 to 500000.
nums : ranges from 1 to nums.size().


Output:

An integer answer the minimum number of operations to make the shelf beautiful.


*/

#include <iostream>
#include <vector>
#include <cassert>
#include <cstdio>
#include <stdexcept>



int SortingBooks(std::vector<int> &nums){
    if (nums.size() < 1 || nums.size() > 500000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < nums.size(); i++) {
        if (nums[i] < 1 || nums[i] > nums.size()) {
            throw std::invalid_argument("Invalid Constraints");
        }
    }
    int num_elements=nums.size();

    std::vector<int> freq(num_elements), current_freq(num_elements);
    std::vector<std::pair<int, int>> first_last(num_elements, {-1, -1});

    for (int i = 0; i < num_elements; ++i) {
        nums[i]--;
        freq[nums[i]]++;
        if (first_last[nums[i]].first == -1)
            first_last[nums[i]] = {i, i};
        first_last[nums[i]].second = i;
    }

    std::vector<int> dp(num_elements + 1);
    for (int i = num_elements - 1; i >= 0; --i) {
        dp[i] = dp[i + 1];
        current_freq[nums[i]]++;
        if (i == first_last[nums[i]].first)
            dp[i] = std::max(dp[i], dp[first_last[nums[i]].second + 1] + freq[nums[i]]);
        else
            dp[i] = std::max(dp[i], current_freq[nums[i]]);
    }

    int ans=num_elements - dp[0] ;
    return ans;
}

int main()
{

    // TEST
    std::vector<int> nums_1 = {1,2,2,1,3};
    int expected_1 = 2;
    int result_1 = SortingBooks(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {4, 1, 5, 4, 1, 1};
    int expected_2 = 2;
    int result_2 = SortingBooks(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1, 2, 3};
    int expected_3 = 0;
    int result_3 = SortingBooks(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {4, 3, 2, 1};
    int expected_4 = 0;
    int result_4 = SortingBooks(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {2, 3, 1, 5, 4, 6};
    int expected_5 = 0;
    int result_5 = SortingBooks(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {5, 1, 2, 4, 3, 6, 7};
    int expected_6 = 0;
    int result_6 = SortingBooks(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1, 3, 2, 5, 4, 6, 7};
    int expected_7 = 0;
    int result_7 = SortingBooks(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {4, 2, 3, 1, 5, 6, 7, 8};
    int expected_8 = 0;
    int result_8 = SortingBooks(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {3, 2, 4, 1, 5};
    int val_9=3;
    int expected_9 = 0;
    int result_9 = SortingBooks(nums_9);
    assert(result_9 == expected_9);
    // TEST_END

     // TEST
    std::vector<int> nums_10 = {2, 3, -1};
    try
    {
        SortingBooks(nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {2, 3, 0};
    try
    {
        SortingBooks(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_12 = {2, 3, 400000};
    try
    {
        SortingBooks(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_13 = {};
    try
    {
        SortingBooks(nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_14(500005, 1);
    try
    {
        SortingBooks(nums_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_15(1,-5);
    try
    {
        SortingBooks(nums_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_16={-5,-10};
    try
    {
        SortingBooks(nums_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!";
    return 0;
}
