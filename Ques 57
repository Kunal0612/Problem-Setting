/*

https://codeforces.com/problemset/problem/1845/E

Create a C++ function named BoxesandBalls that will find the number of different arrangements of balls that can exist after exactly num_moves moves are performed, modulo 10^9 + 7.

In the kingdom of Boxlandia, there are n boxes arranged in a straight line, numbered from 1 to n. These boxes are special, for some of them contain a magical ball, while others are empty. The magical property of these boxes is such that at least one box contains a ball and at least one box is empty.

The wizard of Boxlandia has devised a game where you can make moves to shift the balls between the boxes. In each move, you must choose a box containing a ball and an adjacent empty box, then move the ball from the current box to the adjacent empty box. Adjacent boxes are defined as i and i+1 for all i from 1 to nâˆ’1. Note that boxes 1 and n are not considered adjacent.


You are tasked with determining how many different arrangements of the balls can exist after exactly num_moves moves. Two arrangements are considered different if there is at least one box that contains a ball in one arrangement and does not contain a ball in the other arrangement.

Input:

An integer num_moves.
A vector of integers nums contain either 0 or 1 where 0 denote the empty box , 1 denote the ball inside the box.


Constraints:

nums.size() : ranges from 2 to 1500.
num_moves : ranges from 1 to 1500.
nums : either contain 0 or 1.

Output:

A integer ans that will find the number of different arrangements of balls that can exist after exactly num_moves moves are performed, modulo 10^9 + 7.


*/
#include <iostream>
#include <vector>
#include <cstdio>
#include <cmath>
#include <cassert>



int Add(int node_a, int node_b){
    const int MOD = int(1e9) + 7;
    node_a += node_b;
    if (node_a >= MOD)
        node_a -= MOD;
    return node_a;
}

int BoxesandBalls(std::vector<int> &nums,int num_moves){
    int len=nums.size();
    if(len<2 or len>1500){
        throw std::invalid_argument("Invalid Constraint");
    }
    if(num_moves<1 or num_moves>1500){
        throw std::invalid_argument("Invalid Constraints");
    }
    for(int i=0;i<len;i++){
        if(nums[i]!=0 and nums[i]!=1){
            throw std::invalid_argument("Invalid value of nums");
        }
    }
    int limit = 1;
    while (limit * (limit + 1) < num_moves * 2) ++limit;
    std::vector<std::vector<std::vector<int>>> dpp(2, std::vector<std::vector<int>>(2 * limit + 1, std::vector<int>(num_moves + 1)));
    dpp[0][limit][0] = 1;
    for (int i = 0; i < len; i++){
        int cur = i & 1;
        int nxt = cur ^ 1;
        dpp[nxt] = std::vector<std::vector<int>>(2 * limit + 1, std::vector<int>(num_moves + 1));
        for (int j = 0; j < 2 * limit + 1; j++) {
            for (int k = 0; k <= num_moves; k++) {
                if (dpp[cur][j][k]){
                    for (int option = 0; option < 2; option++){
                        int new_limit = j + option - nums[i];
                        int new_sum = k + std::abs(new_limit - limit);
                        if (new_sum <= num_moves) {
                            dpp[nxt][new_limit][new_sum] = Add(dpp[nxt][new_limit][new_sum], dpp[cur][j][k]);
                        }
                    }
                }
            }
        }
    }
    int answer = 0;
    for (int k = num_moves & 1; k <= num_moves; k += 2) {
        answer = Add(answer, dpp[len & 1][limit][k]);
    }
    return answer;
}

int main() {
    // TEST
    std::vector<int> nums_1 = {1, 0, 1, 0};
    int num_moves_1 = 1;
    int expected_1 = 3;
    int result_1 = BoxesandBalls(nums_1, num_moves_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {0, 1, 0, 1, 0, 1};
    int num_moves_2 = 2;
    int expected_2 = 7;
    int result_2 = BoxesandBalls(nums_2, num_moves_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1, 1, 1, 1};
    int num_moves_3 = 2;
    int expected_3 = 1;
    int result_3 = BoxesandBalls(nums_3, num_moves_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {0, 0, 0, 0};
    int num_moves_4 = 1;
    int expected_4 = 0;
    int result_4 = BoxesandBalls(nums_4, num_moves_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
    int num_moves_5 = 3;
    int expected_5 = 51;
    int result_5 = BoxesandBalls(nums_5, num_moves_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {1, 0};
    int num_moves_6 = 1;
    int expected_6 = 1;
    int result_6 = BoxesandBalls(nums_6, num_moves_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {0, 1, 1, 0, 1, 1, 0, 1, 0};
    int num_moves_7 = 4;
    int expected_7 = 39;
    int result_7 = BoxesandBalls(nums_7, num_moves_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0};
    int num_moves_8 = 5;
    int expected_8 = 162;
    int result_8 = BoxesandBalls(nums_8, num_moves_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::vector<int> nums_9 = {};
    int num_moves_9=5;
    try
    {
        BoxesandBalls(nums_9,num_moves_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_10 = {1};
    int num_moves_10=5;
    try
    {
        BoxesandBalls(nums_10,num_moves_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_11 = {100000};
    int num_moves_11=5;
    try
    {
        BoxesandBalls(nums_11,num_moves_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12 = {-100000};
    int num_moves_12=5;
    try
    {
        BoxesandBalls(nums_12,num_moves_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_13 = {1};
    int num_moves_13=-5;
    try
    {
        BoxesandBalls(nums_13,num_moves_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_14 = {1};
    int num_moves_14=2000;
    try
    {
        BoxesandBalls(nums_14,num_moves_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_15 = {1};
    int num_moves_15=0;
    try
    {
        BoxesandBalls(nums_15,num_moves_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
