// https://codeforces.com/problemset/problem/1969/E

// Once upon a time, in a land ruled by numbers, there existed a kingdom named Arraya. Arraya was a long, linear kingdom made up of integers arranged in a line, each holding a unique position from 1 to n. The length of the kingdom, n, defined the number of elements in this linear arrangement, also known as an array.

// Within Arraya, there were smaller regions called subarrays. These subarrays were special, as they represented contiguous sequences of elements from the larger kingdom. For example, a subarray could be any sequence starting from the l-th position to the r-th position in the kingdom, where 1 ≤ l < r ≤ n. Each subarray had to be unique to maintain the harmony of Arraya.

// A subarray was considered unique if it contained at least one integer that appeared exactly once within that subarray. This uniqueness was essential for the prosperity of the kingdom, ensuring that every subarray had its own distinct character.

// However, Arraya faced a grave challenge. Not all subarrays were unique, as some contained integers that appeared more than once, disrupting the kingdom's balance. This issue called for a solution to restore the uniqueness of every subarray.

// The wise mathematicians of Arraya proposed a magical operation to address this problem. They could choose any element of the array and replace it with any other integer of their choice. Their goal was to perform this operation as few times as possible, thereby minimizing the changes needed to ensure that every subarray contained at least one unique integer.


// Input:

// A vector of long long integers nums containing the elements of the vector.

// Constraints:

// nums.size() : Should be at least 1 and at most 300,000.
// nums: Each element should be between 1  and size inclusive.

// Output:

// The minimum number of operation answer in order for all the subarrays of the array a to be unique.

#include <vector>
#include <algorithm>
#include <iostream>
#include <cassert>

class SegmentTree {
public:
    std::vector<int> tree, lazy;

    SegmentTree(int n) {
        tree = lazy = std::vector<int>(4 * n);
    }

    void Push(int node) {
        if (node * 2 + 2 >= tree.size()) return;
        tree[node * 2 + 1] += lazy[node]; lazy[node * 2 + 1] += lazy[node];
        tree[node * 2 + 2] += lazy[node]; lazy[node * 2 + 2] += lazy[node];
        lazy[node] = 0;
    }

    void Update(int node, int start, int end, int left, int right, int value) {
        if (left >= right) return;
        if (start == left && end == right) {
            tree[node] += value; lazy[node] += value;
            return;
        }
        int mid = (start + end) / 2;
        Push(node);
        Update(node * 2 + 1, start, mid, left, std::min(mid, right), value);
        Update(node * 2 + 2, mid, end, std::max(mid, left), right, value);
        tree[node] = std::min(tree[node * 2 + 1], tree[node * 2 + 2]);
    }

    int Get(int node, int start, int end, int left, int right) {
        if (left >= right) return 1e9;
        if (start == left && end == right) return tree[node];
        int mid = (start + end) / 2;
        Push(node);
        return std::min(
            Get(node * 2 + 1, start, mid, left, std::min(mid, right)),
            Get(node * 2 + 2, mid, end, std::max(mid, left), right)
        );
    }
};

int UniqueArray(std::vector<int> &nums) {
    int size = nums.size();
    if(size<1 or size>300000) throw std::invalid_argument("Invalid Size.");
    for (auto& element : nums){
        if(element<1 or element>size) throw std::invalid_argument("Element must be between 1 and size");
        --element;
    } 
    SegmentTree segTree(size);
    std::vector<std::vector<int>> positions(size);
    int answer = 0, start = 0;
    for (int i = 0; i < size; ++i) {
        int element = nums[i];
        positions[element].push_back(i);
        int count = positions[element].size();
        if (count > 0) segTree.Update(0, 0, size, start, positions[element][count - 1] + 1, +1);
        if (count > 1) segTree.Update(0, 0, size, start, positions[element][count - 2] + 1, -2);
        if (count > 2) segTree.Update(0, 0, size, start, positions[element][count - 3] + 1, +1);
        if (segTree.Get(0, 0, size, start, i + 1) == 0) {
            answer += 1;
            start = i + 1;
        }
    }
    return answer;
}

int main()
{
    //TEST
    std::vector<int> nums_1 = {1,2,3,4,5};
    int expected_1 = 0;
    int result_1 = UniqueArray(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    //TEST
    std::vector<int> nums_2 = {1,1};
    int expected_2 = 1;
    int result_2 = UniqueArray(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    //TEST
    std::vector<int> nums_3 = {1,1,2,2};
    int expected_3 = 2;
    int result_3 = UniqueArray(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    //TEST
    std::vector<int> nums_4 = {5, 5, 5, 5,5};
    int expected_4 = 2;
    int result_4 = UniqueArray(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    //TEST
    std::vector<int> nums_5 = {1};
    int expected_5 = 0;
    int result_5 = UniqueArray(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    //TEST
    std::vector<int> nums_6 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int expected_6 = 0;
    int result_6 = UniqueArray(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    //TEST
    std::vector<int> nums_7 = {1, 2, 3, 4, 5, 5, 5};
    int expected_7 = 1;
    int result_7 = UniqueArray(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    //TEST
    std::vector<int> nums_8 = {1, 2, 1, 2, 1, 2, 1, 2};
    int expected_8 = 2;
    int result_8 = UniqueArray(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    //TEST
    std::vector<int> nums_9 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 2};
    int expected_9 = 4;
    int result_9 = UniqueArray(nums_9);
    assert(result_9 == expected_9);
    // TEST_END

    //TEST
    std::vector<int> nums_10 = {1, -2, 3, 4, 5, 6, 7, 8, 9, 10};
    int expected_10 = 0;
    int result_10;
        try
        {
            UniqueArray(nums_10);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END

    //TEST
    std::vector<int> nums_11 = {1, 2, -3, -4, 5, 6, -7, 8, 9, 10};
    int expected_11 = 0;
    int result_11;
        try
        {
            UniqueArray(nums_11);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END

    std::cout << "All test cases passed!\n";
    return 0;
}
