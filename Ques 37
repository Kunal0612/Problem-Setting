/*

https://codeforces.com/problemset/problem/1896/E

Once upon a time in a kingdom, there existed a magical array called permutation a. This array was not just any array; it consisted of n distinct integers ranging from 1 to n, arranged in a unique order. Let's call this order nums=[nums1,nums2,‚Ä¶,numsn].

In this enchanted land, each index i in the array a held a special secret. An index i was considered "good" if nums[i]=i. Imagine these indices as gateways to instant fulfillment of wishes‚Äîif you were at a good index, your wish was instantly granted.

However, not all indices were good initially. Some indices i were "not good," meaning nums[ùëñ]‚â†ùëñ. To remedy this, every second, the kingdom's sorcerer would perform a mystical rotation. All the indices that were not good would rotate to the right by one position. For instance, if nums[i] was not good, it would move to nums[i+1], and so forth, with the last element wrapping around to the beginning.

The sorcerer repeated this rotation until all indices in a became good, one by one. Each time an index i became good, it marked the fulfillment of a prophecy.

The kingdom needed to know the exact moment when each index i turned good for the first time. This magical chronicle was crucial for the balance and harmony of the land.

Thus, the challenge was set: determine for each index i from 1 to n, the first time it became good under the sorcerer's mystical rotations.

And so, the quest for unraveling the mysteries of permutation a began, ensuring every index would find its rightful place in time.

Input :

A vector of integer nums.

Output : 

A vector of integer ans where ans[i] the first time that index i becomes good.

Constraint :

nums.size() : ranges from 1 to 10^6
nums[i] : ranges from 1 to n

*/


#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>


void Incre(int idx, int val, std::vector<int>& fenwick_tree, int len) {
    for (; idx <= 2 * len; idx += idx & -idx) {
        fenwick_tree[idx] += val;
    }
}

int Query(int idx, const std::vector<int>& fenwick_tree) {
    int res = 0;
    for (; idx > 0; idx -= idx & -idx) {
        res += fenwick_tree[idx];
    }
    return res;
}

int Query(int start, int end, const std::vector<int>& fenwick_tree) {
    return Query(end, fenwick_tree) - Query(start - 1, fenwick_tree);
}

std::vector<int> PermutationSorting(std::vector<int>& nums) {
    int len = nums.size();
    if (len < 1 || len > 1000000) {
        throw std::invalid_argument("Invalid value of n. Expected 1 <= n <= 1000000.");
    }
    
    for (int i = 0; i < len; ++i) {
        if (nums[i] < 1 || nums[i] > len) {
            throw std::invalid_argument("Invalid value in permutation array a.");
        }
    }
    std::vector<int> ans(len);
    std::vector<int> fenwick_tree(2 * len + 1, 0);
    std::vector<std::pair<int, int>> rgs;
    for (int idx = 0; idx < len; idx++) {
        if (idx <= nums[idx] - 1) {
            rgs.push_back({idx, nums[idx] - 1});
            rgs.push_back({idx + len, nums[idx] - 1 + len});
        } else {
            rgs.push_back({idx, nums[idx] - 1 + len});
        }
    }
    std::sort(rgs.begin(), rgs.end(), std::greater<std::pair<int, int>>());
    for (auto &itt : rgs) {
        int left=itt.first;
        int right=itt.second;
        if (left < len) {
            ans[nums[left] - 1] = right - left - Query(left + 1, right + 1, fenwick_tree);
        }
        Incre(right + 1, 1, fenwick_tree, len);
    }
    return ans;
}

int main() {

    // TEST
    std::vector<int> nums_1 = {1};
    std::vector<int> expected_1 = {0};
    std::vector<int> result_1 = PermutationSorting(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {1, 2};
    std::vector<int> expected_2 = {0, 0};
    std::vector<int> result_2 = PermutationSorting(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1, 2, 3};
    std::vector<int> expected_3 = {0, 0, 0};
    std::vector<int> result_3 = PermutationSorting(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {4, 3, 2, 1};
    std::vector<int> expected_4 = {1, 2, 1, 2};
    std::vector<int> result_4 = PermutationSorting(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {2, 3, 1, 5, 4, 6};
    std::vector<int> expected_5 = {2,1, 1, 2, 1, 0};
    std::vector<int> result_5 = PermutationSorting(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {5, 1, 2, 4, 3, 6, 7};
    std::vector<int> expected_6 = {3, 3, 3, 0, 3, 0, 0};
    std::vector<int> result_6 = PermutationSorting(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1, 3, 2, 5, 4, 6, 7};
    std::vector<int> expected_7 = {0, 2, 1, 2, 1, 0, 0};
    std::vector<int> result_7 = PermutationSorting(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {4, 2, 3, 1, 5, 6, 7, 8};
    std::vector<int> expected_8 = {1, 0, 0, 1, 0, 0, 0, 0};
    std::vector<int> result_8 = PermutationSorting(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {3,2,4,1,5};
    std::vector<int> expected_9 = {1,0,1,1,0};
    std::vector<int> result_9 = PermutationSorting(nums_9);
    assert(result_9 == expected_9);
    // TEST_END

    // TEST
    std::vector<int> nums_10 = {2, 3, -1}; 
    try
    {
        PermutationSorting(nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {2, 3, 0}; 
    try
    {
        PermutationSorting(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_12 = {2, 3, 4}; 
    try
    {
        PermutationSorting(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_13 = {}; 
    try
    {
        PermutationSorting(nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
// TEST
    std::vector<int> nums_14(2000005,1); 
    try
    {
        PermutationSorting(nums_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
