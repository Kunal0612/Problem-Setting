// https://codeforces.com/contest/1691/problem/D

// Write a C++ Function CheckIfExist to check if the equality exists for all pairs of indices (i,j).

// You and your friend Anish are playing a game you ask your friend to 
// find the maximum of for all the segment , in return your friend ask you a 
// question ie You are given an array a of n integers. You are asked to find out 
// if the inequality max(a[i],a[i+1],…,a[j−1],a[j])≥a[i]+a[i+1]+⋯+a[j−1]+a[j] 
// holds for all pairs of indices (i,j), where 1≤i≤j≤n.

// Input:

// A vector of long long integers nums containing the elements of the vector.

// Constraints:

// size: Should be at least 1 and at most 200,000.
// nums: Each element should be between -1,000,000,000(-10^9) and 1,000,000,000 (10^9) inclusive.

// Output:

// A boolean value true if it exists for all pairs of indices (i,j), else false.




#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <stack>
#include <cassert>


std::vector<int> NextGreater(std::vector<long long int>& nums, int size) {
    std::stack<int> stk;    
    std::vector<int> result(size, size);
    for (int idx = 0; idx < size; idx++) {
        while (!stk.empty() && nums[stk.top()] < nums[idx]) {
            result[stk.top()] = idx;    
            stk.pop();
        }
        stk.push(idx);
    }
    return result;
}

std::vector<int> PrevGreater(std::vector<long long int>& nums, int size) {
    std::stack<int> stk;    
    std::vector<int> result(size, -1);
    for (int idx = size - 1; idx >= 0; idx--) {
        while (!stk.empty() && nums[stk.top()] < nums[idx]) {
            result[stk.top()] = idx;    
            stk.pop();
        }
        stk.push(idx);
    }
    return result;
}

long long int Query(std::vector<long long int> &segment_tree, int node, int start, int end, int query_start, int query_end) {
    if (query_end < start || query_start > end) return -1e15;
    if (query_start <= start && end <= query_end) return segment_tree[node];

    int mid = start + (end - start) / 2;
    long long int left_query = Query(segment_tree, 2 * node, start, mid, query_start, query_end);
    long long int right_query = Query(segment_tree, 2 * node + 1, mid + 1, end, query_start, query_end);
    return std::max(left_query, right_query);
}

bool CheckIfExists(std::vector<long long int> &nums) {
    if (nums.size() <= 0) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < nums.size(); ++i)
    {
        if (nums[i] < -1000000000 || nums[i] > 1000000000)
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    int size=nums.size();
    int new_size = size;
    while (__builtin_popcount(new_size) != 1)
        new_size++;
    std::vector<long long int> prefix_sum(size, 0), suffix_sum(size, 0);
    prefix_sum[0] = nums[0];
    for (int idx = 1; idx < size; idx++) {
        prefix_sum[idx] = prefix_sum[idx - 1] + nums[idx];
    }
    suffix_sum[size - 1] = nums[size - 1];
    for (int idx = size - 2; idx >= 0; idx--) {
        suffix_sum[idx] = suffix_sum[idx + 1] + nums[idx];
    }
    std::vector<long long int> prefix_tree(2 * new_size, neg_inf), suffix_tree(2 * new_size, neg_inf);

    for (int idx = 0; idx < size; idx++) {
        prefix_tree[new_size + idx] = prefix_sum[idx];
        suffix_tree[new_size + idx] = suffix_sum[idx];
    }

    for (int idx = new_size - 1; idx >= 1; idx--) {
        prefix_tree[idx] = std::max(prefix_tree[2 * idx], prefix_tree[2 * idx + 1]);
        suffix_tree[idx] = std::max(suffix_tree[2 * idx], suffix_tree[2 * idx + 1]);
    }
    std::vector<int> next_greater = NextGreater(nums, size);
    std::vector<int> prev_greater = PrevGreater(nums, size);
    bool flag = true;

    for (int idx = 0; idx < size; idx++) {
        long long int right_max = Query(prefix_tree, 1, 0, new_size - 1, idx + 1, next_greater[idx] - 1) - prefix_sum[idx];
        long long int left_max = Query(suffix_tree, 1, 0, new_size - 1, prev_greater[idx] + 1, idx - 1) - suffix_sum[idx];
        if (std::max(left_max, right_max) > 0) {
            flag = false;
            break;
        }
    }
    return flag;
}

int main(){

    //Test
        std::vector<long long int> nums_1 = {-1,1,-1,2};
        bool expected_1=1;
        bool result_1 = CheckIfExists(nums_1);
        assert(result_1 == expected_1);
    //TEST_END

    //TEST
    std::vector<long long int> nums_2 = {1, -1, 2, -1, 1};
    bool expected_2 = 1;
    bool result_2 = CheckIfExists(nums_2);
    assert(result_2 == expected_2);
    //TEST_END

    //TEST
    std::vector<long long int> nums_3 = {2, -1, 3, -2, 4};
    bool expected_3 = false;
    bool result_3 = CheckIfExists(nums_3);
    assert(result_3 == expected_3);
    //TEST_END

    //TEST
    std::vector<long long int> nums_4 = {0, -1, 1, -1, 2};
    bool expected_4 = true;
    bool result_4 = CheckIfExists(nums_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    std::vector<long long int> nums_5 = {5, -5, 10, -10, 5};
    bool expected_5 = true;
    bool result_5 = CheckIfExists(nums_5);
    assert(result_5 == expected_5);
    //TEST_END

    //TEST
    std::vector<long long int> nums_6 = {-3, 3, -3, 3, -3, 3};
    bool expected_6 = true;
    bool result_6 = CheckIfExists(nums_6);
    assert(result_6 == expected_6);
    //TEST_END

    //TEST
    std::vector<long long int> nums_7 = {4, -4, 8, -8, 4, -4};
    bool expected_7 = true;
    bool result_7 = CheckIfExists(nums_7);
    assert(result_7 == expected_7);
    //TEST_END

    //TEST
    std::vector<long long int> nums_8 = {7, -7, 14, -14, 7};
    bool expected_8 = true;
    bool result_8 = CheckIfExists(nums_8);
    assert(result_8 == expected_8);
    //TEST_END

    //TEST
    std::vector<long long int> nums_9 = {1, 2, 3, 4, 5};
    bool expected_9 = false;
    bool result_9 = CheckIfExists(nums_9);
    assert(result_9 == expected_9);
    //TEST_END

    // Test
        std::vector<long long int> nums_10 = {};
        int expected_10;
        try
        {
            CheckIfExists(nums_10);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END

    // Test
        std::vector<long long int> nums_11 = {-10000000002,10000000002};
        int expected_11;
        try
        {
            CheckIfExists(nums_11);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
