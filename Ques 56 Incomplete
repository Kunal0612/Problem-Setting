/*

https://codeforces.com/problemset/problem/1903/D2

Create a C++ function named MaximumAndQueries that will find the maximum possible bitwise AND for each query.

In the enchanted land of Bitlandia, a young mathematician named Theofanis loves to play with numbers, especially manipulating their bits. He has an vector a of size 
len and an enchanted integer val. With the power of val, Theofanis can perform at most val magical operations on the array. Each operation allows him to pick a single element from the array and increase it by 1.

Theofanis is fascinated by the bitwise AND operation and has discovered that by carefully using his val operations, he can maximize the bitwise AND value of the entire array. He has put a lot of effort into finding the maximum bitwise AND that the array nums can achieve after at most val operations, and he is thrilled with his results.

However, trouble lurks in Bitlandia. Adaś, a mischievous troublemaker, is jealous of Theofanis's discoveries. Adaś repeatedly changes the value of val, causing Theofanis to recalculate the maximum bitwise AND for each new value of val.

Your Quest

You must help Theofanis by calculating the maximum possible bitwise AND for query different values of val.

Each query is independent, and you need to provide Theofanis with the correct answers quickly, so he can outsmart Adaś.

Input:

A vector of integers nums.
A vector of integer queires.


Constraints:

nums.size() : ranges from 1 to 1000000.
queries.size() : ranges from 1 to 1000000.
nums : ranges from 0 to 1000000.
queries : ranges from 0 to 10^18.

Output:

A long long vector of integer ans that will answer the maximum possible bitwise AND for each query.


*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdint>
#include <cassert>

int64_t dp_sum[1 << 20][20];
int64_t dp_cnt[1 << 20];

std::vector<int64_t> MaximumAndQueries(std::vector<int> &nums,std::vector<int64_t> &queries){
    if(nums.empty() or nums.size()>1000000){
        throw std::invalid_argument("Invalid nums Length");
    }
    if(queries.empty() or queries.size()>1000000){
        throw std::invalid_argument("Invalid queries Length");
    }
    for(int i=0;i<nums.size();i++){
        if(nums[i]<0 or nums[i]>1000000){
            throw std::invalid_argument("Invalid Constraints");
        }
    }
    for(int i=0;i<queries.size();i++){
        if(queries[i]<0 or queries[i]>10000000000000000000){
            throw std::invalid_argument("Invalid Constraints");
        }
    }
    int64_t n=nums.size(), q=queries.size();
    int64_t s_to = 0, s_from = 0;
    for (int64_t i = 0; i < n; ++i) {
        s_to += (1ll << 20ll) - nums[i];
        s_from += nums[i];
        ++dp_cnt[nums[i]];
        int64_t sum = 0;
        for (int64_t j = 0; j < 20; ++j) {
            sum += nums[i] & (1ll << j);
            dp_sum[nums[i]][j] += sum;
        }
    }

    for (int64_t i = 0; i < 20; ++i) {
        for (int64_t j = 0; j < (1 << 20); ++j) {
            if (!(j & (1 << i))) {
                dp_cnt[j] += dp_cnt[j + (1 << i)];
            }
        }
    }

    for (int64_t i = 0; i < 20; ++i) {
        for (int64_t j = 0; j < (1 << 20); ++j) {
            if (!(j & (1 << i))) {
                for (int64_t l = 0; l < 20; ++l) {
                    dp_sum[j][l] += dp_sum[j + (1 << i)][l];
                }
            }
        }
    }
    std::vector<int64_t> answer;
    for(int y=0;y<q;y++){
        int64_t cnt=queries[y];
        if (cnt >= s_to) {
            cnt += s_from;
            answer.push_back(cnt/n);
            continue;
        }
        int64_t ans = 0;
        for (int64_t i = 19; i >= 0; --i) {
            int64_t x = (n - dp_cnt[ans | (1 << i)]) * (1ll << i);
            x -= dp_sum[ans][i] - dp_sum[ans | (1 << i)][i];
            if (x <= cnt) {
                cnt -= x;
                ans |= 1 << i;
            }
        }
        answer.push_back(ans);
    }
    return answer;
}


int main() {
    // TEST
    std::vector<int> nums_1 = {1};
    std::vector<int64_t> queries_1 = {1};
    std::vector<int64_t> expected_1 = {2};
    std::vector<int64_t> result_1 = MaximumAndQueries(nums_1, queries_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {0, 1, 2, 3, 4, 5};
    std::vector<int64_t> queries_2 = {1, 10, 100};
    std::vector<int64_t> expected_2 = {1,4,19};
    std::vector<int64_t> result_2 = MaximumAndQueries(nums_2, queries_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1,2,3,4,5};
    std::vector<int64_t> queries_3 = {1, 10, 100};
    std::vector<int64_t> expected_3 = {0,5,23};
    std::vector<int64_t> result_3 = MaximumAndQueries(nums_3, queries_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST 4
    std::vector<int> nums_4 = {0, 1, 2, 3, 4, 5};
    std::vector<int64_t> queries_4 = {1000000, 1000000000};
    std::vector<int64_t> expected_4 = {15, 150};
    std::vector<int64_t> result_4 = MaximumAndQueries(nums_4, queries_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST 5
    std::vector<int> nums_5 = {1, 2, 4, 8, 16};
    std::vector<int64_t> queries_5 = {1, 2, 4, 8, 16, 32};
    std::vector<int64_t> expected_5 = {16, 32, 64, 128, 256, 512};
    std::vector<int64_t> result_5 = MaximumAndQueries(nums_5, queries_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST 6
    std::vector<int> nums_6 = {1000000};
    std::vector<int64_t> queries_6 = {1000000000000000000};
    std::vector<int64_t> expected_6 = {1000000};
    std::vector<int64_t> result_6 = MaximumAndQueries(nums_6, queries_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST 7
    std::vector<int> nums_7 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    std::vector<int64_t> queries_7 = {1, 10, 100, 1000, 10000};
    std::vector<int64_t> expected_7 = {9, 45, 285, 1785, 10785};
    std::vector<int64_t> result_7 = MaximumAndQueries(nums_7, queries_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST 8
    std::vector<int> nums_8 = {999999};
    std::vector<int64_t> queries_8 = {999999999999999999};
    std::vector<int64_t> expected_8 = {999999};
    std::vector<int64_t> result_8 = MaximumAndQueries(nums_8, queries_8);
    assert(result_8 == expected_8);
    // TEST_END

    std::cout << "All test cases passed!\n";
    return 0;
}
