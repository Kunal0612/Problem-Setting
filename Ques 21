// https://leetcode.com/problems/smallest-missing-genetic-value-in-each-subtree/

// Write a C++ function SmallestMissingValueSubtree to find a an vector ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.

// In the vibrant kingdom of Genetica, there was a majestic family tree rooted at the great ancestor, represented as node 0. This family tree had n nodes, each numbered from 0 to n - 1, tracing the lineage of the entire kingdom. The connections between the family members were documented in a 0-indexed integer array called parents, where parents[i] denoted the parent of node i. Naturally, since node 0 was the root of the family tree, parents[0] was set to -1.

// Within this family, there were 105 unique genetic traits, each represented by an integer in the inclusive range of [1, 105]. Every member of the family possessed a distinct genetic trait, and these traits were cataloged in a 0-indexed integer array named nums, where nums[i] corresponded to the genetic value of node i.

// The scholars of Genetica were tasked with an intriguing challenge: they needed to determine the smallest genetic trait that was absent from the lineage of each family member. Specifically, for each node i, they had to identify the smallest genetic value that did not appear in the subtree rooted at that node. The subtree rooted at a node x included node x itself and all its descendant nodes.

// To solve this problem, the scholars sought to create an array called ans of length n, where ans[i] would be the smallest genetic value missing from the subtree rooted at node i.

// Your task is to assist the scholars of Genetica by writing a function that returns the array ans, capturing the missing genetic values for each node in the family tree.


// Input:

// // A vector of integers nums containing the elements of the vector.
// // A vector of integers parents containing query to be apply.

// Constraints:

// The number of nodes in the family tree, size , is equal to the length of the parents array and the length of the nums array.
// nums.size() : The number of nodes, size, must be between 2 and 105 inclusive.
// parents : For each node i (except for the root node at index 0), parents[i] must be between 0 and n - 1 inclusive.
//           The root node, which is node 0, must have parents[0] equal to -1.
//           The parents array must represent a valid tree structure.
// nums :  Each genetic value in the nums array must be between 1 and 105 inclusive.
//         All genetic values in the nums array must be distinct.


// Output:

// An vector ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.

#include <vector>
#include <algorithm>
#include <iostream>
#include <cassert>
#include <stdexcept>

class DisjointSetUnion
{
public:
    std::vector<int> parent_arr, rank_arr;

    DisjointSetUnion(int size) : parent_arr(size), rank_arr(size, 1)
    {
        for (int idx = 0; idx < size; idx++)
        {
            parent_arr[idx] = idx;
        }
    }

    int Find(int idx)
    {
        if (parent_arr[idx] == idx)
        {
            return idx;
        }
        return parent_arr[idx] = Find(parent_arr[idx]);
    }

    void Unite(int idx_1, int idx_2)
    {
        int root_1 = Find(idx_1);
        int root_2 = Find(idx_2);
        if (root_1 != root_2)
        {
            if (rank_arr[root_1] < rank_arr[root_2])
            {
                std::swap(root_1, root_2);
            }
            parent_arr[root_2] = root_1;
            rank_arr[root_1] += (rank_arr[root_1] == rank_arr[root_2]);
        }
    }
};

void Dfs(int curr_idx, const std::vector<std::vector<int>> &child_list, DisjointSetUnion &dsu, std::vector<int> &result)
{
    int mex = 1;
    for (size_t i = 0; i < child_list[curr_idx].size(); ++i)
    {
        int child_idx = child_list[curr_idx][i];
        Dfs(child_idx, child_list, dsu, result);
        mex = std::max(mex, result[child_idx]);
        dsu.Unite(child_idx + 100001, curr_idx + 100001);
    }
    while (mex <= 100000 && dsu.Find(mex) == dsu.Find(curr_idx + 100001))
    {
        mex++;
    }
    result[curr_idx] = mex;
}

std::vector<int> SmallestMissingValueSubtree(std::vector<int> &parents, std::vector<int> &nums)
{
    int length = parents.size();
    if (length != nums.size())
        throw std::invalid_argument("parents and nums must have the same length");
    if (length < 2 || length > 100000)
        throw std::invalid_argument("length of parents and nums must be between 2 and 100000");
    if (parents[0] != -1)
        throw std::invalid_argument("The root must have a parent of -1");

    std::vector<bool> seen(100001, false);
    for (int i=0;i<nums.size();i++)
    {
        int num = nums[i];
        if (num < 1 || num > 100000)
            throw std::invalid_argument("nums elements must be between 1 and 100000");
        if (seen[num])
            throw std::invalid_argument("nums elements must be distinct");
        seen[num] = true;
    }

    std::vector<std::vector<int>> child_list(length);
    for (int idx = 1; idx < length; idx++)
    {
        if (parents[idx] < 0 || parents[idx] >= length)
            throw std::invalid_argument("parents contains invalid index");
        child_list[parents[idx]].push_back(idx);
    }

    DisjointSetUnion dsu(200001);
    for (int idx = 0; idx < length; idx++)
    {
        dsu.Unite(nums[idx], idx + 100001);
    }

    std::vector<int> result(length);
    Dfs(0, child_list, dsu, result);

    return result;
}

int main() {
    // TEST
    std::vector<int> nums_1 = {5,4,6,2,1,3};
    std::vector<int> parents_1 = {-1,0,1,0,3,3};
    std::vector<int> expected_1 = {7,1,1,4,2,1};
    std::vector<int> result_1 = SmallestMissingValueSubtree(parents_1, nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {1,2};
    std::vector<int> parents_2 = {-1,0};
    std::vector<int> expected_2 = {3,1};
    std::vector<int> result_2 = SmallestMissingValueSubtree(parents_2, nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {2,1,3};
    std::vector<int> parents_3 = {-1,0,1};
    std::vector<int> expected_3 = {4,2,1};
    std::vector<int> result_3 = SmallestMissingValueSubtree(parents_3, nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {1,2,3,4};
    std::vector<int> parents_4 = {-1,0,0,1};
    std::vector<int> expected_4 = {5,1,1,1};
    std::vector<int> result_4 = SmallestMissingValueSubtree(parents_4, nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {7,6,5,4,3,2,1};
    std::vector<int> parents_5 = {-1,0,0,1,1,2,2};
    std::vector<int> expected_5 = {8,1,3,1,1,1,2};
    std::vector<int> result_5 = SmallestMissingValueSubtree(parents_5, nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {3,1,2,5,4};
    std::vector<int> parents_6 = {-1,0,1,2,2};
    std::vector<int> expected_6 = {6,3,1,1,1};
    std::vector<int> result_6 = SmallestMissingValueSubtree(parents_6, nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {9,8,7,6,5,4,3,2,1};
    std::vector<int> parents_7 = {-1,0,0,1,1,2,2,3,3};
    std::vector<int> expected_7 = {10,3,1,3,1,1,1,1,2};
    std::vector<int> result_7 = SmallestMissingValueSubtree(parents_7, nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {1,3,4,2,5};
    std::vector<int> parents_8 = {-1,0,0,1,1};
    std::vector<int> expected_8 = {6,1,1,1,1};
    std::vector<int> result_8 = SmallestMissingValueSubtree(parents_8, nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {1,2,100000};
    std::vector<int> parents_9 = {-1,0,1,2};
    try {
        SmallestMissingValueSubtree(parents_9, nums_9);
        assert(false); 
    } catch (const std::exception &e) {
        assert(true); 
    }
    // TEST_END

    // TEST
    std::vector<int> nums_10 = {1,2,3,4};
    std::vector<int> parents_10 = {5,0,1};
    try {
        SmallestMissingValueSubtree(parents_10, nums_10);
        assert(false); 
    } catch (const std::exception &e) {
        assert(true); 
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {1,2,2};
    std::vector<int> parents_11 = {-1,0,1};
    try {
        SmallestMissingValueSubtree(parents_11, nums_11);
        assert(false); 
    } catch (const std::exception &e) {
        assert(true); 
    }
    // TEST_END

    // TEST
    std::vector<int> nums_12 = {1,2};
    std::vector<int> parents_12 = {-1,0,1};
    try {
        SmallestMissingValueSubtree(parents_12, nums_12);
        assert(false); 
    } catch (const std::exception &e) {
        assert(true); 
    }
    // TEST_END

    // TEST
    std::vector<int> nums_13 = {};
    std::vector<int> parents_13 = {};
    try {
        SmallestMissingValueSubtree(parents_13, nums_13);
        assert(false); 
    } catch (const std::exception &e) {
        assert(true); 
    }
    // TEST_END

    std::cout << "All test cases passed!" << std::endl;

    return 0;
}
