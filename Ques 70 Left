https://codeforces.com/problemset/problem/1859/E

Create a C++ function named MaximumMonogonosity to find the maximum possible sum of costs of such segments.

You are given an array arr of length n and an array brr of length n. The cost of a segment [l,r] , 1≤l≤r≤n, is defined as |brr[l]−arr[r]|+|brr[r]−arr[l]| .

Recall that two segments [l1,r1], 1≤l1≤r1≤n , and [l2,r2] , 1≤l2≤r2≤n , are non-intersecting if one of the following conditions is satisfied: r1<l2
or r2<l1.

The length of a segment [l,r] , 1≤l≤r≤n , is defined as r−l+1.

Find the maximum possible sum of costs of non-intersecting segments [lj,rj] , 1≤lj≤rj≤n, whose total length is equal to limit.

Input:

The vector of integers arr.
The vector of integers brr.
An integer limit.

Constraints:

limit : ranges from 1 to arr.size().
arr.size() : ranges from 1 to 3000.
arr : ranges from -10^9 to 10^9.
brr.size() : ranges from 1 to 3000.
brr : ranges from -10^9 to 10^9.


Output:

An integer answer the maximum possible sum of costs of such segments. 

Sol : https://codeforces.com/blog/entry/119287
