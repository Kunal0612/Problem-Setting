// https://atcoder.jp/contests/abc354/tasks/abc354_f
// Create a C++ function named FindIntegersInLongestIncreasingSubsequence that helps Raj to find out all integers that could be a part of Longest Increasing Subsequence.


// Raj with his friend Ritika is playing a game of integers. 
//So Raj in his turn ask Ritika to find the longest increasing subsequence 
//that would be formed from the given integers. Ritika found it but won't say the 
//length of longest increasing subsequence and again she ask raj to 
//find out which are the number that could be a part of longest increasing subsequence.

// So you have to help raj to find which are the integers which could be the part of the longest increasing subsequence. 

// You are given an integer sequence Vector vec of length N.

// For each t=1,2,…,N, determine whether vec[t] is included in a longest increasing subsequence of vec.

// Here, vec[t] ​is included in a longest increasing subsequence of A if and only if the following holds:

// Let L be the length of a longest increasing subsequence of vec. There exists a strictly increasing integer sequence i=(i1,i2,…,iL) and (i1 < i2 <⋯< iL), where each element is between 1 and N, inclusive, that satisfies all of the following conditions:

// -> vec[i1] < vec[i2] <⋯<vec[iL] .

// -> ik=t for some k (1≤k≤L).


// Input Format

// An integer vec_length representing the number of elements in the vector.
// A vector vec of integers containing the elements of the Sequence.

// Output Format

// A vector of integers result containing the indices of the elements that could be a part of longest 
// increasing subsequence.

// Constraints : 
// vec_length: Should be at least 1 and at most 200,000.
// vec: Each element should be between 1 and 1,000,000,000 (10^9) inclusive.



//CODE : 


#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <cassert>

class Node {
public:
    long long value = 0;
};

class SegmentTree {
public:
    std::vector<Node> segment_tree;
    long long size;

    SegmentTree(long long size) {
        this->size = size;
        segment_tree.resize(4 * (size + 1));
    }

    Node Combine(Node &a, Node &b) {
        Node result;
        result.value = std::max(a.value, b.value);
        return result;
    }

    Node Assign(long long value) {
        Node result;
        result.value = value;
        return result;
    }

    Node NoOverlapReturn() {
        Node result;
        result.value = 0;
        return result;
    }

    void BuildSegment(long long index, long long left, long long right, std::vector<long long> &vec) {
        if (left == right) {
            segment_tree[index] = Assign(vec[left]);
            return;
        }
        long long mid = left + ((right - left) >> 1);
        BuildSegment(2 * index, left, mid, vec);
        BuildSegment(2 * index + 1, mid + 1, right, vec);
        segment_tree[index] = Combine(segment_tree[2 * index], segment_tree[2 * index + 1]);
    }

    Node QuerySegment(long long index, long long left, long long right, long long &query_left, long long &query_right) {
        if (left >= query_left && right <= query_right) return segment_tree[index];
        if (right < query_left || left > query_right) return NoOverlapReturn();
        long long mid = left + ((right - left) >> 1);
        Node left_node = QuerySegment(2 * index, left, mid, query_left, query_right);
        Node right_node = QuerySegment(2 * index + 1, mid + 1, right, query_left, query_right);
        return Combine(left_node, right_node);
    }

    void UpdateSegment(long long index, long long left, long long right, long long &position, long long &value) {
        if (left == right) {
            segment_tree[index] = Assign(value);
            return;
        }
        long long mid = left + ((right - left) >> 1);
        if (position <= mid) UpdateSegment(2 * index, left, mid, position, value);
        else UpdateSegment(2 * index + 1, mid + 1, right, position, value);
        segment_tree[index] = Combine(segment_tree[2 * index], segment_tree[2 * index + 1]);
    }

    void Build(std::vector<long long> &vec) {
        BuildSegment(1, 1, size, vec);
    }

    Node Query(long long left, long long right) {
        return QuerySegment(1, 1, size, left, right);
    }

    void Update(long long index, long long value) {
        UpdateSegment(1, 1, size, index, value);
    }
};

std::vector<long long> Compress(std::vector<long long> &vec) {
    int vec_size = vec.size(), value = 1;
    std::vector<long long> sorted_vec = vec;
    std::sort(sorted_vec.begin(), sorted_vec.end());
    std::map<int, int> mapping;
    for (int i = 1; i < sorted_vec.size(); i++) {
        if (!mapping.count(sorted_vec[i])) mapping[sorted_vec[i]] = value++;
    }
    for (int i = 1; i < vec.size(); i++) {
        vec[i] = mapping[vec[i]];
    }
    return vec;
}

std::vector<int> FindIntegersInLongestIncreasingSubsequence(int vec_length, std::vector<int> &vec) {
    if (vec_length <= 0) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < vec_length; ++i)
    {
        if (vec[i] < 1 || vec[i] > 1000000000)
        {
            throw std::invalid_argument("Invalid element value");
        }
    }

    std::vector<long long> arr(vec_length + 1, 0);
    for (long long i = 1; i <= vec_length; i++) {
        arr[i] = vec[i - 1];
    }
    Compress(arr);

    SegmentTree segment_tree(vec_length), segment_tree_reverse(vec_length);
    std::vector<long long> values(vec_length + 1, 0);
    segment_tree.Build(values);
    segment_tree_reverse.Build(values);

    long long max_value = 0;
    for (int i=1;i<=vec_length;i++) {
        max_value = std::max(max_value, arr[i]);
    }

    std::vector<long long> left_max(vec_length + 1, 1), right_max(vec_length + 1, 1);

    for (long long i = 1; i <= vec_length; i++) {
        Node node_value = segment_tree.Query(1, arr[i] - 1);
        left_max[i] = std::max(left_max[i], node_value.value + 1);
        segment_tree.Update(arr[i], left_max[i]);
    }

    for (int i = vec_length; i >= 1; i--) {
        Node node_value = segment_tree_reverse.Query(arr[i] + 1, max_value);
        right_max[i] = std::max(right_max[i], node_value.value + 1);
        segment_tree_reverse.Update(arr[i], right_max[i]);
    }

    long long max_length = 1;
    for (int i = 1; i <= vec_length; i++) {
        max_length = std::max(max_length, left_max[i] + right_max[i] - 1);
    }

    std::vector<int> result;
    for (int i = 1; i <= vec_length; i++) {
        if (left_max[i] + right_max[i] - 1 == max_length) {
            result.push_back(i);
        }
    }

    return result;
}


int main()
{
    //TEST
        int vec_length_1 = 5;
        std::vector<int> vec_1 = {15, 14, 17, 42, 34};
        std::vector<int> expected_1 = {1,2,3,4,5};
        std::vector<int> result_1 = FindIntegersInLongestIncreasingSubsequence(vec_length_1, vec_1);
        assert(result_1 == expected_1);
    //TEST_END

    // TEST
        int vec_length_2 = 5;
        std::vector<int> vec_2 = {2,1,4,5,3};
        std::vector<int> expected_2 = {1,2,3,4};
        std::vector<int> result_2 = FindIntegersInLongestIncreasingSubsequence(vec_length_2, vec_2);
        assert(result_2 == expected_2);
    // TEST_END

    

    // TEST
        long long vec_length_3 = -4;
        std::vector<int> vec_3 = {-15, 14, 17,-42};
        std::vector<int> expected_3;
        try
        {
            FindIntegersInLongestIncreasingSubsequence(vec_length_3, vec_3);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END

    // TEST 
    int vec_length_4 = 6;
    std::vector<int> vec_4 = {2, 5, 3, 4, 3, 4};
    std::vector<int> expected_4 = {1,3,4,5,6};
    std::vector<int> result_4 = FindIntegersInLongestIncreasingSubsequence(vec_length_4, vec_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST 
    int vec_length_5 = 5;
    std::vector<int> vec_5 = {10000, 1000, 100, 1, 10};
    std::vector<int> expected_5 = {4,5};
    std::vector<int> result_5 = FindIntegersInLongestIncreasingSubsequence(vec_length_5, vec_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST 
    int vec_length_6 = 7;
    std::vector<int> vec_6 = {1, 2, 7, 8, 1, 2, 6};
    std::vector<int> expected_6 = {1,2,3,4};
    std::vector<int> result_6 = FindIntegersInLongestIncreasingSubsequence(vec_length_6, vec_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST 
    int vec_length_7 = 6;
    std::vector<int> vec_7 = {2, 5, 8, 4, 3, 4};
    std::vector<int> expected_7 = {1,2,3,5,6};
    std::vector<int> result_7 = FindIntegersInLongestIncreasingSubsequence(vec_length_7, vec_7);
    assert(result_7 == expected_7);
    // TEST_END
    // TEST
        long long vec_length_8 = 0;
        std::vector<int> vec_8 = {-15, 14, 4 ,-42};
        std::vector<int> expected_8;
        try
        {
            FindIntegersInLongestIncreasingSubsequence(vec_length_8, vec_8);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END

    // TEST
        long long vec_length_9 = 8;
        std::vector<int> vec_9 = {-15, 14, 4 ,-42};
        std::vector<int> expected_9;
        try
        {
            FindIntegersInLongestIncreasingSubsequence(vec_length_9, vec_9);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END

    // TEST
        long long vec_length_10 = -10;
        std::vector<int> vec_10 = {-100, 14, -400 ,-42};
        std::vector<int> expected_10;
        try
        {
            FindIntegersInLongestIncreasingSubsequence(vec_length_10, vec_10);
            assert(false);
        }
        catch (const std::invalid_argument &e)
        {
            assert(true);
        }
    // TEST_END

    std::cout << "All TEST cases passed!\n";
    return 0;
}
