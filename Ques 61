
/*

https://codeforces.com/problemset/problem/1942/F

Create a C++ function named FavoriteFunction to answer each query.

In the quaint village of Numland, Farmer John had a peculiar array of numbers, a, of length n. This array wasn't just any array; it held a special significance in his daily farming calculations, governed by a mystical function f. The function f followed a unique pattern:

For the first element, f(1)=nums[1] 

For all subsequent elements i>1,  f(i)=f(i−1)+nums[i] 

​Farmer John relied on the value of f(n), the result after applying the function to the entire array, for various farming decisions. However, f(i) wasn't always an integer, and for practical purposes, he often needed the floor value of f(n), denoted as ⌊f(n)⌋, which means the greatest integer less than or equal to f(n).

One day, Farmer John realized he needed to update his array multiple times. Each update involved setting a specific element in the array to a new value. After each update, he wanted to know the updated ⌊f(n)⌋.

Farmer John sought the help of the clever villagers to handle these updates efficiently. Here was the challenge they faced:

Initial Array: An array nums of length n.
Function Definition:f(1)=nums[1] 
​
For all i>1, f(i)=f(i−1)+nums[i] 

Updates: He planned to make q updates. Each update consisted of:
Two integers, k and x, indicating that the k-th element of the array should be updated to x.
After each update, the villagers needed to compute the new value of ⌊f(n)⌋.

Farmer John was counting on the villagers' wisdom to perform these updates quickly and accurately, ensuring his farm operations ran smoothly. Could you help the villagers determine the floor value of f(n) after each update?

Join in this numerical adventure and assist Farmer John in maintaining the prosperity of his farm!

Input:

A vector of long long integers nums.
A vector of vector of long long integers queries.

Constraints:

nums.size() : ranges from 1 to 200000.
queries.size() : ranges from 1 to 200000.
nums : ranges from 0 to 10^18
queries : queries[i][0] : ranges from 1 to nums.size().
          queries[i][1] : ranges from 0 to 10^18.

Output:

A vector of integers answer to answer each query.

*/

#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>


std::pair<long long, long long> Merge(std::pair<long long, long long> arr, std::pair<long long, long long> brr) {
    int v_left=arr.first;
    int c_left=arr.second;
    int v_right=brr.first;
    int c_right=brr.second;
    if (v_left == -1) return brr;
    if (v_right == -1) return arr;

    if (v_left < c_right - 1) return {v_right, (long long)2e18};
    if (v_left >= c_right) return {v_right + 1, (long long)2e18};

    return {v_right, c_left};
}

void Update(std::vector<std::pair<long long, long long>>& seg, int i, std::pair<long long, long long> val, int blocks) {
    seg[i += blocks] = val;

    for (i /= 2; i > 0; i /= 2)
        seg[i] = Merge(seg[i * 2], seg[i * 2 + 1]);
}

long long Query(const std::vector<std::pair<long long, long long>>& seg, int blocks, int left = 0, int right = -1) {
    if (right == -1) right = blocks - 1;
    std::pair<long long, long long> retL = {-1, -1};
    std::pair<long long, long long> retR = {-1, -1};

    for (left += blocks, right += blocks; left <= right; right /= 2, left /= 2) {
        if (left % 2 == 1) retL = Merge(retL, seg[left++]);
        if (right % 2 == 0) retR = Merge(seg[right--], retR);
    }
    return Merge(retL, retR).first;
}

void UpBlock(const std::vector<long long>& arr, std::vector<std::pair<long long, long long>>& seg, int blk, int blocks) {
    const long long int B = 6;
    const int MAX = 2e5 + B + 5;
    int left = blk * B;
    int right = left + B - 1;

    long long val = 0;
    for (int i = left; i <= right; i++)
        val = floor(sqrtl((long double)val + arr[i]));

    long long req = val + 1;
    for (int i = right; i >= left; i--) {
        if (req > 2e9) {
            Update(seg, blk, {val, (long long)2e18}, blocks);
            return;
        }
        req = req * req - arr[i];
    }
    Update(seg, blk, {val, req}, blocks);
}

std::vector<long long> FavoriteFunction(std::vector<long long>& nums, std::vector<std::vector<long long int>>& queries) {
    const long long int B = 6;
    const int MAX = 2e5 + B + 5;
    if (nums.size() <= 0 or nums.size()>200000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    if (queries.size() <= 0 or queries.size()>200000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for(int i=0;i<nums.size();i++){
        if(nums[i]<0 or nums[i]>1000000000000000000){
            throw std::invalid_argument("Invalid num element value");
        }
    }
    for(int i=0;i<queries.size();i++){
        if(queries[i][0]<1 or queries[i][0]>nums.size() or queries[i][1]<0 or queries[i][1]>1000000000000000000){
            throw std::invalid_argument("Invalid num element value");
        }
    }
    int n = nums.size();
    int q = queries.size();
    int offset = (B - n % B) % B;
    n += offset;
    int blocks = n / B;

    std::vector<long long> arr(MAX, 0);
    std::vector<std::pair<long long, long long>> seg(MAX);

    for (int i = offset; i < n; i++)
        arr[i] = nums[i - offset];

    for (int b = 0; b < blocks; b++)
        UpBlock(arr, seg, b, blocks);

    std::vector<long long> result;
    for (int i=0;i<q;i++) {
        std::vector<long long int> query=queries[i];
        int first = query[0];
        long long sec = query[1];
        first--;
        first += offset;

        arr[first] = sec;
        UpBlock(arr, seg, first / B, blocks);

        result.push_back(Query(seg, blocks));
    }

    return result;
}

int main() {
    // TEST 1
    std::vector<long long> nums_1 = {0,14,0,7,6};
    std::vector<std::vector<long long int>> queries_1 = {{1, 4}, {1, 3}, {2, 15}, {4,1}, {5, 2},{5,8}};
    std::vector<long long> expected_1 = {3,2,3,2,1,3};
    std::vector<long long> result_1 = FavoriteFunction(nums_1, queries_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST 2
    std::vector<long long> nums_2 = {2, 1};
    std::vector<std::vector<long long int>> queries_2 = {{1, 1}, {1, 2}, {2, 2}};
    std::vector<long long> expected_2 = {1,1, 1};
    std::vector<long long> result_2 = FavoriteFunction(nums_2, queries_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST 3
    std::vector<long long> nums_3 = {7, 8, 6, 4, 5};
    std::vector<std::vector<long long int>> queries_3 = {{1, 3}, {3, 5}, {1, 5}};
    std::vector<long long> expected_3 = {2,2,2};
    std::vector<long long> result_3 = FavoriteFunction(nums_3, queries_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST 4
    std::vector<long long> nums_4 = {1, 2, 3, 4, 5};
    std::vector<std::vector<long long int>> queries_4 = {{1, 5}, {2, 4}, {1, 1}};
    std::vector<long long> expected_4 = {2,2,2};
    std::vector<long long> result_4 = FavoriteFunction(nums_4, queries_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST 5
    std::vector<long long> nums_5 = {9, 1, 3, 2, 7, 5};
    std::vector<std::vector<long long int>> queries_5 = {{1, 6}, {1, 2}, {3, 5}, {4, 6}};
    std::vector<long long> expected_5 = {2,2,2,2};
    std::vector<long long> result_5 = FavoriteFunction(nums_5, queries_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST 6
    std::vector<long long> nums_6 = {5, 6, 3, 4, 8, 7};
    std::vector<std::vector<long long int>> queries_6 = {{1, 4}, {2, 5}, {3, 6}};
    std::vector<long long> expected_6 = {3,3,3};
    std::vector<long long> result_6 = FavoriteFunction(nums_6, queries_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST 7
    std::vector<long long> nums_7 = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    std::vector<std::vector<long long int>> queries_7 = {{1, 7}, {2, 8}, {3, 10}};
    std::vector<long long> expected_7 = {2,2,2};
    std::vector<long long> result_7 = FavoriteFunction(nums_7, queries_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST 8
    std::vector<long long> nums_8 = {10, 20, 30, 40, 50};
    std::vector<std::vector<long long int>> queries_8 = {{1, 3}, {2, 4}, {1, 5}};
    std::vector<long long> expected_8 = {7,7,7};
    std::vector<long long> result_8 = FavoriteFunction(nums_8, queries_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::vector<long long> nums_9 = {1, 2, 3, 4, 1000000000000000001};
    std::vector<std::vector<long long>> queries_9 = {{1, 3}, {2, 4}, {1, 5}};
    try
    {
        FavoriteFunction(nums_9, queries_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long> nums_10 = {-1, 2, 3, 4, 0};
    std::vector<std::vector<long long>> queries_10 = {{1, 3}, {2, 4}, {1, 5}};
    try
    {
        FavoriteFunction(nums_10, queries_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long> nums_11 = {1, 2, 3, 4, -1};
    std::vector<std::vector<long long>> queries_11 = {{1, 3}, {2, 4}, {1, 5}};
    try
    {
        FavoriteFunction(nums_11, queries_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long> nums_12 = {};
    std::vector<std::vector<long long>> queries_12 = {{1, 3}, {2, 4}, {1, 5}};
    try
    {
        FavoriteFunction(nums_12, queries_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long> nums_13 = {1,2};
    std::vector<std::vector<long long>> queries_13 = {{1, 1000000000000000001}, {2, 4}, {1, 5}};
    try
    {
        FavoriteFunction(nums_13, queries_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long> nums_14 = {1,2};
    std::vector<std::vector<long long>> queries_14 = {{0, -3}, {2, 2}, {1, 1}};
    try
    {
        FavoriteFunction(nums_14, queries_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long> nums_15 = {1,2};
    std::vector<std::vector<long long>> queries_15 = {};
    try
    {
        FavoriteFunction(nums_15, queries_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long> nums_16 = {1,2};
    std::vector<std::vector<long long>> queries_16 = {{-1, 3}, {2, 2}, {1, 1}};
    try
    {
        FavoriteFunction(nums_16, queries_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!";
    return 0;
}
