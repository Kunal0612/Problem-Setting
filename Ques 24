/*

https://leetcode.com/problems/minimum-number-of-visited-cells-in-a-grid/

Write a C++ Function MinimumVisitedCells to find minimum number of cells you need to visit to reach.



In the realm of Gridonia, a land adorned with rows x cols cells of numerical values, a brave 
adventurer embarks on a quest fraught with challenges and mysteries. Our story begins 
with our hero standing at the precipice of a vast grid, their initial position nestled 
within the top-left cell, (0, 0).

With determination in their heart and resolve in their soul, the adventurer sets forth, 
guided by the rules of movement dictated by the grid's numerical landscape. From their 
starting point, they have two choices: to move rightward or downward, each movement 
governed by the value of the cell they currently occupy.

The rules are clear:

From any cell at coordinates (i, j), our adventurer may move rightward to a cell at 
coordinates (i, k), where k lies within the range j < k <= grid[i][j] + j.
Alternatively, they may choose to move downward to a cell at coordinates (k, j), where 
k lies within the range i < k <= grid[i][j] + i.
With each step, our hero inches closer to their ultimate destinationâ€”the bottom-right 
cell of the grid, at coordinates (rows - 1, cols - 1). But the path is not without its challenges, 
for the grid's numerical values dictate the scope of their journey.

As our adventurer traverses the grid, navigating through its labyrinthine paths, they encounter 
obstacles and trials. Yet, with every movement, they persevere, driven by the desire to uncover 
the shortest route to their destination.

But beware, for not all paths lead to success. In some instances, the grid's layout may 
present an impassable barrier, denying passage to the bottom-right cell. In such cases, 
the adventurer must concede defeat, returning empty-handed from their valiant endeavor.

And so, with courage as their compass and determination as their guide, our hero ventures 
forth into the depths of Gridonia, their fate intertwined with the numerical tapestry that 
unfolds before them. Will they emerge victorious, or will the grid's challenges prove 
insurmountable? Only time will tell as the story of their quest unfolds.

Input:

A vector of vector of integers grid.

Output : 

A integer ans to find minimum number of cells you need to visit to reach.

Constraint : 

grid : where rows and cols each range from 1 to 10^5.
       The total number of cells in the grid, represented by the product of rows and cols, ranges from 1 to 10^5.
       Each cell within the grid holds a numerical value, denoted by grid[i][j], where i represents the row index and j represents the column index.
       The numerical values in the grid range from 0 to rows * cols - 1, offering a diverse array of possibilities for navigation.
       The bottom-right cell of the grid, located at coordinates (rows- 1, cols - 1), holds a numerical value of 0, serving as the destination for the adventurers.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>



class SegTree
{
    int size;
    std::vector<int> tree;

public:
    SegTree(int size)
    {
        this->size = size;
        tree.resize(2 * size);
        for (int i = 0; i < size; i++)
            tree[i + size] = 1e9;
        for (int i = size - 1; i > 0; --i)
            tree[i] = std::min(tree[i * 2], tree[i * 2 + 1]);
    }
    int GetRange(int left, int right)
    {
        right++;
        if (right < left)
            return 1e9;
        int result = 1e9;
        for (left += size, right += size; left < right; left /= 2, right /= 2)
        {
            if (left & 1)
                result = std::min(result, tree[left++]);
            if (right & 1)
                result = std::min(result, tree[--right]);
        }
        return result;
    }
    int GetOne(int pos)
    {
        return tree[pos + size];
    }
    void Update(int pos, int val)
    {
        for (tree[pos += size] = val; pos > 1; pos /= 2)
            tree[pos / 2] = std::min(tree[pos], tree[pos ^ 1]);
    }
};

int MinimumVisitedCells(std::vector<std::vector<int>> &grid)
{
    int rows = grid.size();
    int cols = grid[0].size();
    if (rows < 1 || rows > 100000 || cols < 1 || cols > 100000)
        throw std::invalid_argument("Rows and cols must be between 1 and 10^5");

    if (rows * cols > 100000)
        throw std::invalid_argument("Product of rows and cols must be at most 10^5");

    if (grid[rows - 1][cols - 1] != 0)
        throw std::invalid_argument("Bottom right cell must be 0");
    std::vector<SegTree> row;
    for (int i = 0; i < rows; i++)
        row.push_back(SegTree(cols));
    std::vector<SegTree> col;
    for (int j = 0; j < cols; j++)
        col.push_back(SegTree(rows));
    std::vector<std::vector<int>> dpp(rows, std::vector<int>(cols, 1e9));
    dpp[0][0] = 1;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            dpp[i][j] = std::min(dpp[i][j], 1 + row[i].GetRange(j, cols - 1));
            dpp[i][j] = std::min(dpp[i][j], 1 + col[j].GetRange(i, rows - 1));
            int next_j = std::min(j + grid[i][j], cols - 1);
            row[i].Update(next_j, std::min(dpp[i][j], row[i].GetOne(next_j)));
            int next_i = std::min(i + grid[i][j], rows - 1);
            col[j].Update(next_i, std::min(dpp[i][j], col[j].GetOne(next_i)));
        }
    }
    int ans=-1;
    if (dpp[rows - 1][cols - 1] < 1e9)
        ans=dpp[rows - 1][cols - 1];
    return ans;
}

int main(){
    // TEST
    std::vector<std::vector<int>> grid_1 = {{3, 4, 2, 1}, {4, 2, 3, 1}, {2, 1, 0, 0}, {2, 4, 0, 0}};
    int expected_1 = 4;
    int result_1 = MinimumVisitedCells(grid_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_2 = {{0}};
    int expected_2 = 1;
    int result_2 = MinimumVisitedCells(grid_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_3 = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
    int expected_3 = -1;
    int result_3 = MinimumVisitedCells(grid_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_4 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};
    int expected_4 = 4;
    int result_4 = MinimumVisitedCells(grid_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_5 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 0}};
    int expected_5 = 4;
    int result_5 = MinimumVisitedCells(grid_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_6 = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}};
    int expected_6 = -1;
    int result_6 = MinimumVisitedCells(grid_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_7 = {{0}};
    int expected_7 = 1;
    int result_7 = MinimumVisitedCells(grid_7);
    assert(result_7 == expected_7);
    // TEST_END


    // TEST
    std::vector<std::vector<int>> grid_8 = {{}};
    try
    {
        MinimumVisitedCells(grid_8);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_9(100005,std::vector<int> (1,1));
    try
    {
        MinimumVisitedCells(grid_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_10(1, std::vector<int>(100005, 1));
    int result_10;
    try
    {
        MinimumVisitedCells(grid_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_11 = {{0, 0, 0}, {0, 0, 0}, {0, 0, 1}};
    try
    {
        MinimumVisitedCells(grid_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> grid_12(1000,std::vector<int> (1000,0));
    try
    {
        MinimumVisitedCells(grid_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    std::cout << "All test cases passed!\n";
    return 0;
}
