
/*

https://codeforces.com/problemset/problem/1784/C

Write a C++ Function Monsters to find out smallest number of times you need to cast spells of type 1 to kill all k monsters.

Deep in the realm of Zorthar, where ancient beasts roamed and adventurers sought glory, a young mage named Alara found herself facing a daunting challenge. She stood before a horde of n monsters, each possessing a formidable amount of health points. These monsters, numbered from 1 to n, were unlike any she had encountered before—some large and resilient, others smaller yet equally tenacious.

Alara possessed two types of spells to combat these monsters:

The first spell allowed her to target a single monster and deal exactly 1 point of damage. This spell, though modest, could be cast repeatedly without limit.

The second spell, however, was more potent but restricted in use. It dealt 1 damage to every monster simultaneously. If this spell caused any monster to perish—reducing its health to 0—the spell would repeat until no further monsters succumbed.

Her strategy needed to be precise. For each k from 1 to n, she had to determine the minimum number of times she would need to cast the first type of spell to vanquish all monsters numbered from 1 to k.

The challenge lay in balancing efficiency with tactical prowess. Should she employ the first type of spell liberally to weaken monsters individually, or should she strategically trigger the second spell to potentially clear multiple monsters in one decisive strike?

As the sun set over the distant peaks and the stars began to twinkle in the night sky, Alara pondered her approach. She meticulously calculated the health points of each monster and mapped out scenarios where her spells could achieve the greatest impact. Every decision she made could sway the outcome—saving precious mana while ensuring swift elimination of threats.

With each calculation and strategic maneuver, Alara moved closer to mastering the art of monster slaying in Zorthar. The fate of the realm rested on her ability to harness the magic at her fingertips and conquer the challenge before her.

And so, armed with determination and boundless potential, Alara faced the horde of monsters, ready to unleash her spells and carve her name into the annals of legend.

Input :

A vector of integers nums.

Output : 

A vector of integer ans where ans[i] is the smallest number of times you need to cast spells of type 1 to kill all k monsters, if only monsters with numbers 1,2,…,n
are present in the game.

Constraint :

nums.size() : ranges from 1 to 200000
nums[i] : ranges from 1 to n

*/

#include <iostream>
#include <vector>
#include <cassert>
#include <functional>

std::vector<int> Monsters(std::vector<int> nums) {
    int size = nums.size();
    if (size < 1 || size > 200000) {
        throw std::invalid_argument("Invalid value of n. Expected 1 <= size <= 200000.");
    }
    
    for (int i = 0; i < size; ++i) {
        if (nums[i] < 1 || nums[i] > size) {
            throw std::invalid_argument("Invalid value in permutation array nums.");
        }
    }
    std::vector<int> min_nums(2 * size - 1);
    std::vector<int> add_nums(2 * size - 1, 0);
    std::vector<int> position(2 * size - 1);
    
    std::function<void(int, int, int, int, int, int)> modify = [&](int index, int left, int right, int low_limit, int high_limit, int value) {
        if (low_limit <= left && right <= high_limit) {
            min_nums[index] += value;
            add_nums[index] += value;
            return;
        }
        int mid = (left + right) >> 1;
        int next_index = index + 2 * (mid - left + 1);
        if (low_limit <= mid) {
            modify(index + 1, left, mid, low_limit, high_limit, value);
        }
        if (high_limit > mid) {
            modify(next_index, mid + 1, right, low_limit, high_limit, value);
        }
        min_nums[index] = std::min(min_nums[index + 1], min_nums[next_index]) + add_nums[index];
        position[index] = (min_nums[index + 1] <= min_nums[next_index] ? position[index + 1] : position[next_index]);
    };
    
    std::function<void(int, int, int)> build = [&](int index, int left, int right) {
        if (left == right) {
            min_nums[index] = left;
            position[index] = left;
            return;
        }
        int mid = (left + right) >> 1;
        int next_index = index + 2 * (mid - left + 1);
        build(index + 1, left, mid);
        build(next_index, mid + 1, right);
        min_nums[index] = std::min(min_nums[index + 1], min_nums[next_index]) + add_nums[index];
        position[index] = (min_nums[index + 1] <= min_nums[next_index] ? position[index + 1] : position[next_index]);
    };
    
    build(0, 1, size);
    long long sum = 0;
    long long count = 0;
    std::vector<int> ans;
    
    for (int i = 0; i < size; i++) {
        sum += nums[i];
        count += 1;
        modify(0, 1, size, nums[i], size, -1);
        if (min_nums[0] < 0) {
            sum -= position[0];
            count -= 1;
            modify(0, 1, size, position[0], size, +1);
        }
        ans.push_back(sum - count * (count + 1) / 2);
    }
    
    return ans;
}



int main() {

    // TEST
    std::vector<int> nums_1 = {3,1,2};
    std::vector<int> expected_1 = {2,1,0};
    std::vector<int> result_1 = Monsters(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {4,1,5,4,1,1};
    std::vector<int> expected_2 = {3,2,4,4,4,4};
    std::vector<int> result_2 = Monsters(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1, 2, 3};
    std::vector<int> expected_3 = {0, 0, 0};
    std::vector<int> result_3 = Monsters(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {4, 3, 2, 1};
    std::vector<int> expected_4 = {3,4,3,0};
    std::vector<int> result_4 = Monsters(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {2, 3, 1, 5, 4, 6};
    std::vector<int> expected_5 = {1,2,0,1,0,0};
    std::vector<int> result_5 = Monsters(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {5, 1, 2, 4, 3, 6, 7};
    std::vector<int> expected_6 = {4,3,2,2,0,0,0};
    std::vector<int> result_6 = Monsters(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1, 3, 2, 5, 4, 6, 7};
    std::vector<int> expected_7 = {0,1,0,1,0,0,0};
    std::vector<int> result_7 = Monsters(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {4, 2, 3, 1, 5, 6, 7, 8};
    std::vector<int> expected_8 = {3,3,3,0,0,0,0,0};
    std::vector<int> result_8 = Monsters(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {3,2,4,1,5};
    std::vector<int> expected_9 = {2,2,3,0,0};
    std::vector<int> result_9 = Monsters(nums_9);
    assert(result_9 == expected_9);
    // TEST_END

    // TEST
    std::vector<int> nums_10 = {2, 3, -1}; 
    try
    {
        Monsters(nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {2, 3, 0}; 
    try
    {
        Monsters(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_12 = {2, 3, 4}; 
    try
    {
        Monsters(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_13 = {}; 
    try
    {
        Monsters(nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_14(200005,1); 
    try
    {
        Monsters(nums_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
