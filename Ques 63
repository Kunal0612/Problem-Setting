/*

https://codeforces.com/problemset/problem/1951/F

Create a C++ function named InversionComposition to return Boolean answer.

In the distant land of Permutonia, the wise King Permutesh ruled over a kingdom of perfect order. His land was known for its arrays of numbers, always arranged in the most fascinating ways. One day, a challenge was brought before the king by a visiting wizard, who presented a mystical permutation puzzle.

The wizard handed King Permutesh a special scroll containing two key elements: a permutation nums of size len and a non-negative integer val. The challenge was to construct another permutation q of the same size len such that the Sum of the inversions of q and the inversions of a composite permutation q⋅p would exactly equal val.

In this kingdom, a permutation is a unique arrangement of numbers from 1 to len. For example, if len=3, then [2, 3, 1] is a permutation of size 3.

To understand the challenge more deeply, King Permutesh revisited the concept of inversions. For any permutation nums, the number of inversions, denoted as inv(a), is the count of pairs of indices (i,j) such that 
i<j and a[i]>a[j]. For instance, in the permutation [2, 3, 1], there are 3 inversions: (2, 1), (3, 1), and (3, 2).

The composite permutation w=q⋅p is defined such that w[i]=q[p[i]] for all 1≤i≤n. The challenge required finding a permutation q such that the Sum of inversions inv(q)+inv(q⋅p) equals the given integer val.

King Permutesh realized that solving this problem required a blend of mathematical prowess and logical reasoning. He pondered whether it was always possible to find such a permutation q for any given permutation 
p and integer val, or if there were instances where the task was simply impossible.

Your task is to assist King Permutesh in solving this conundrum. Given the permutation p and the integer val, determine if it is possible to construct a permutation q such that 
inv(q)+inv(q⋅p)=val. If it is possible, return true else return false.

Input:

A vector of integers nums.
An integer val.

Constraints:

nums.size() : ranges from 1 to 300000.
val : ranges from 0 to nums.size()*(nums.size() - 1).
nums : ranges from 1 to nums.size().


Output:

A Boolean value ans is true if the permutation is possible else false.

*/
#include <vector>
#include <cassert>
#include <iostream>
#include <cstdint>

template<typename T>
struct FenwickTree {
    std::vector<T> bit;
    int len;

    FenwickTree(int len) : len(len), bit(len + 1) {}

    T Sum(int res) {
        T ans = 0;
        for (; res > 0; res -= res & -res) {
            ans += bit[res];
        }
        return ans;
    }

    T Sum(int left, int right) {
        return Sum(right) - Sum(left);
    }

    void Add(int res, T value) {
        for (++res; res <= len; res += res & -res) {
            bit[res] += value;
        }
    }
};

bool InversionComposition(std::vector<int> &nums, int val)
{
    int len = nums.size();
    if (nums.size() < 1 || nums.size() > 300000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    if (val < 0 || val > nums.size() * (nums.size() - 1)) {
        throw std::invalid_argument("Invalid Constraints");
    }
    for (int i = 0; i < len; i++) {
        if (nums[i] < 1 || nums[i] > len) {
            throw std::invalid_argument("Invalid Constraints");
        }
    }
    FenwickTree<int> fen(len);
    std::vector<int> p(len), tmp(len), cnt(len);
    int64_t inv = 0;
    for (int i = 0; i < len; i++)
    {
        nums[i]--;
        tmp[nums[i]] = i;
        inv += i - (cnt[i] = fen.Sum(0, nums[i]));
        fen.Add(nums[i], 1);
    }
    if (val < inv || val > 1LL * len * (len - 1) - inv || (val - inv) % 2 == 1)
    {
        return false;
    }
    return true;
}


int main()
{

    // TEST
    std::vector<int> nums_1 = {3, 1, 2};
    int val_1=2;
    int expected_1 = 1;
    int result_1 = InversionComposition(nums_1,val_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {4, 1, 5, 4, 1, 1};
    int val_2=2;
    int expected_2 = 0;
    int result_2 = InversionComposition(nums_2,val_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1, 2, 3};
    int val_3=2;
    int expected_3 = 1;
    int result_3 = InversionComposition(nums_3,val_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {4, 3, 2, 1};
    int val_4=3;
    int expected_4 = 0;
    int result_4 = InversionComposition(nums_4,val_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {2, 3, 1, 5, 4, 6};
    int expected_5 = 0;
    int val_5=2;
    int result_5 = InversionComposition(nums_5,val_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {5, 1, 2, 4, 3, 6, 7};
    int val_6=2;
    int expected_6 = 0;
    int result_6 = InversionComposition(nums_6,val_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1, 3, 2, 5, 4, 6, 7};
    int val_7=2;
    int expected_7 = 1;
    int result_7 = InversionComposition(nums_7,val_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {4, 2, 3, 1, 5, 6, 7, 8};
    int val_8=3;
    int expected_8 = 0;
    int result_8 = InversionComposition(nums_8,val_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {3, 2, 4, 1, 5};
    int val_9=3;
    int expected_9 = 0;
    int result_9 = InversionComposition(nums_9,val_9);
    assert(result_9 == expected_9);
    // TEST_END

    // TEST
    std::vector<int> nums_10 = {2, 3, -1};
    int val_10 =0;
    try
    {
        InversionComposition(nums_10,val_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {2, 3, 0};
    int val_11 =0;
    try
    {
        InversionComposition(nums_11, val_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_12 = {2, 3, 4};
    int val_12=0;
    try
    {
        InversionComposition(nums_12,val_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_13 = {};
    int val_13=0;
    try
    {
        InversionComposition(nums_13,val_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_14(300005, 1);
    int val_14=0;
    try
    {
        InversionComposition(nums_14,val_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_15(1, 1);
    int val_15=5;
    try
    {
        InversionComposition(nums_15,val_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_16(1, 1);
    int val_16=-5;
    try
    {
        InversionComposition(nums_16,val_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!";
    return 0;
}
