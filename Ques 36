/*
https://leetcode.com/problems/find-number-of-coins-to-place-in-tree-nodes/

Write a function PlacedCoins that find the array coins of size len, where coins[i] is the number 
of coins to be placed at node i.
In a mystical forest, there exists an ancient and enchanted tree with n nodes, each labeled from 
0 to len - 1. This tree is not just any tree; it is the backbone of the forest's magical 
ecosystem, rooted at node 0. The tree's structure is defined by a series of mystical 
connections, described in a 2D integer array called edges. Each element in edges represents 
a magical link between two nodes, ensuring the connectivity and harmony of the tree.

However, the balance of magic in the forest has recently been disturbed. To restore this 
balance, the forest's guardian needs to place a certain number of enchanted coins on 
each node. The number of coins to be placed on any given node is determined by the following rules:

If the size of the subtree of a node is less than 3, place 1 coin on that node.
Otherwise, the number of coins placed on a node is calculated as the maximum product 
of the cost values assigned to three distinct nodes within that subtree. If this product is negative, place 0 coins instead.
The cost values, a measure of the magical strength of each node, are given in a 
0-indexed integer array called cost, where cost[i] represents the magical strength of the ith node.

Task:
Your task is to determine and return an array coins of size n, where coins[i] is 
the number of coins to be placed at node i.

Input:

A 2D integer array edges of length len - 1, where edges[i] = [a_i, b_i] indicates a magical connection between nodes a_i and b_i.
A 0-indexed integer array cost of length len, where cost[i] is the magical strength of the ith node.

Output:

An integer array coins of size n, where coins[i] is the number of coins placed on node i.


Constraints :

The number of nodes len in the tree is at least 2 and at most 20,000.
The number of edges is exactly len−1, ensuring that the graph forms a valid tree.
Each edge is described by a pair of integers, indicating a bidirectional connection between two distinct nodes ai and bi.
The nodes are labeled from 0 to len−1, and each edge connects two valid nodes within this range.
The cost array, which contains the magical strength of each node, has exactly len elements.
The absolute value of the magical strength ∣cost[i]∣ for each node is between 1 and 10,000, inclusive.
The input guarantees that the edges array forms a valid tree structure, meaning it is connected and acyclic.
*/

#include <iostream>
#include <vector>
#include <queue>
#include <cassert>
#include <algorithm>
#include <stdexcept>

std::vector<std::vector<long long>> DfsHelper(int node, std::vector<int> &cost, std::vector<int> &vis, std::vector<long long> &coins, std::vector<int> adj[])
{
    vis[node] = 1;

    std::vector<std::vector<long long>> pre, nde;
    for (auto adj_node : adj[node])
    {
        if (!vis[adj_node])
        {
            auto it = DfsHelper(adj_node, cost, vis, coins, adj);
            pre.push_back(it[0]);
            nde.push_back(it[1]);
        }
    }

    std::priority_queue<long long, std::vector<long long>> pos;
    std::priority_queue<long long, std::vector<long long>, std::greater<long long>> neg;

    if (cost[node] > 0)
        pos.push(cost[node]);
    else
        neg.push(cost[node]);

    for (auto &itr : pre)
        for (auto &it : itr)
            pos.push(it);

    for (auto &itr : nde)
        for (auto &it : itr)
            neg.push(it);

    int count = 3;
    std::vector<long long> top_pos, top_neg;
    while (!pos.empty() && count--)
    {
        top_pos.push_back(pos.top());
        pos.pop();
    }
    count = 3;
    while (!neg.empty() && count--)
    {
        top_neg.push_back(neg.top());
        neg.pop();
    }

    long long sum1 = 0, sum2 = 0;
    if (top_pos.size() >= 3)
        sum1 = top_pos[0] * top_pos[1] * top_pos[2];
    if (top_neg.size() >= 2 && top_pos.size() >= 1)
        sum2 = top_pos[0] * top_neg[0] * top_neg[1];

    int mem = top_pos.size() + top_neg.size();
    if (mem < 3)
        coins[node] = 1;
    else
        coins[node] = std::max(sum1, sum2);

    return {top_pos, top_neg};
}

std::vector<long long> PlacedCoins(std::vector<std::vector<int>> &edges, std::vector<int> &cost)
{
    int len = cost.size();

    if (len < 2 || len > 2 * 10000)
    {
        throw std::invalid_argument("Invalid number of nodes. Must be between 2 and 2*10^4.");
    }

    if (edges.size() != len - 1)
    {
        throw std::invalid_argument("Invalid number of edges. Must be equal to len - 1.");
    }

    for (int i = 0; i < edges.size(); i++)
    {
        std::vector<int> edge = edges[i];
        if (edge.size() != 2)
        {
            throw std::invalid_argument("Invalid edge size. Each edge must have exactly 2 vertices.");
        }

        int node_a = edge[0];
        int node_b = edge[1];
        if (node_a < 0 || node_a >= len || node_b < 0 || node_b >= len)
        {
            throw std::invalid_argument("Invalid edge vertices. Vertices must be between 0 and len-1.");
        }
    }

    if (cost.size() != len)
    {
        throw std::invalid_argument("Invalid cost array size. Must be equal to len.");
    }

    for (int i = 0; i < cost.size(); i++)
    {
        int cst = cost[i];
        if (std::abs(cst) < 1 || std::abs(cst) > 10000)
        {
            throw std::invalid_argument("Invalid cost value. Each cost must be between 1 and 10^4.");
        }
    }

    std::vector<int> adj[len];
    for (auto &it : edges)
    {
        int node_u = it[0], node_v = it[1];
        adj[node_u].push_back(node_v);
        adj[node_v].push_back(node_u);
    }

    std::vector<int> vis(len, 0);
    std::vector<long long> coins(len, 0);

    DfsHelper(0, cost, vis, coins, adj);
    return coins;
}

int main() {

    // TEST
    std::vector<std::vector<int>> edges_1 = {{0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}};
    std::vector<int> cost_1 = {1, 2, 3, 4, 5, 6};
    std::vector<long long int> expected_1 = {120, 1, 1, 1, 1, 1};
    std::vector<long long int> result_1 = PlacedCoins(edges_1, cost_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_2 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
    std::vector<int> cost_2 = {1, 1, 1, 1, 1};
    std::vector<long long int> expected_2 = {1, 1, 1, 1, 1};
    std::vector<long long int> result_2 = PlacedCoins(edges_2, cost_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_3 = {{0, 1}, {0, 2}, {1, 3}, {1, 4}};
    std::vector<int> cost_3 = {1, 3, 2, 4, 5};
    std::vector<long long int> expected_3 = {60, 60, 1, 1, 1};
    std::vector<long long int> result_3 = PlacedCoins(edges_3, cost_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_4 = {{0, 1}, {1, 2}, {1, 3}, {2, 4}};
    std::vector<int> cost_4 = {1, 2, 3, 4, 5};
    std::vector<long long int> expected_4 = {60, 60, 1, 1, 1};
    std::vector<long long int> result_4 = PlacedCoins(edges_4, cost_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_5 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 5}};
    std::vector<int> cost_5 = {1, 1, 1, 1, 1, 1};
    std::vector<long long int> expected_5 = {1, 1, 1, 1, 1, 1};
    std::vector<long long int> result_5 = PlacedCoins(edges_5, cost_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_6 = {{0, 1}, {0, 2}, {0, 3}};
    std::vector<int> cost_6 = {10, 20, 30, 40};
    std::vector<long long int> expected_6 = {24000, 1,1,1};
    std::vector<long long int> result_6 = PlacedCoins(edges_6, cost_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_7 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {0, 5}, {5, 6}};
    std::vector<int> cost_7 = {1, 2, 3, 4, 5, 6, 7};
    std::vector<long long int> expected_7 = {210,60,60,1,1,1,1};
    std::vector<long long int> result_7 = PlacedCoins(edges_7, cost_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_8 = {{0, 1}, {1, 2}, {1, 3}, {3, 4}, {4, 5}};
    std::vector<int> cost_8 = {5, 6, 7, 8, 9, 10};
    std::vector<long long int> expected_8 = {720,720,1,720,1,1};
    std::vector<long long int> result_8 = PlacedCoins(edges_8, cost_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_9 = {{0, 1}, {0, 2}, {0, 3}};
    std::vector<int> cost_9 = {1};
    try
    {
        PlacedCoins(edges_9, cost_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_10 = {};
    std::vector<int> cost_10 = {1, 2}; 
    try
    {
        PlacedCoins(edges_10, cost_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_11 = {{0,-1},{1,-2},{2,3}};
    std::vector<int> cost_11 = {1,2,3,4,5}; 
    try
    {
        PlacedCoins(edges_11, cost_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_12 = {{0,1,0},{1,2}};
    std::vector<int> cost_12 = {1,2,3};
    try
    {
        PlacedCoins(edges_12, cost_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_13 = {{0,1},{1,2},{2,3}};
    std::vector<int> cost_13 = {};
    try
    {
        PlacedCoins(edges_13, cost_13);
        assert(false); 
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END


    // TEST
    std::vector<std::vector<int>> edges_14 = {{0,1},{1,2},{2,3},{3,4},{4,5},{5,6},{6,7},{7,8},{8,9},{9,10},{10,11},{11,12},{12,13},{13,14},{14,15},{15,16},{16,17},{17,18},{18,19}};
    std::vector<int> cost_14 = {100000,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}; 
    try
    {
        PlacedCoins(edges_14, cost_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<std::vector<int>> edges_15 = {{0,10000},{1,2},{2,3},{3,4},{4,5},{5,6},{6,7},{7,8},{8,9},{9,10},{10,11},{11,12},{12,13},{13,14},{14,15},{15,16},{16,17},{17,18},{18,19}};
    std::vector<int> cost_15 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}; 
    try
    {
        PlacedCoins(edges_15, cost_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
